{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///marklib.js","webpack:///webpack/bootstrap 023d930f2212a10e7181","webpack:///./src/export.js","webpack:///./src/main/Marklib.js","webpack:///./~/babel-runtime/helpers/interop-require.js","webpack:///./~/babel-runtime/helpers/class-call-check.js","webpack:///./~/babel-runtime/helpers/create-class.js","webpack:///./src/main/util/Util.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequire","Marklib","_classCallCheck","_createClass","_utilUtil","Util","ATTR_DATA_ORIGINAL_INDEX","DATA_IS_SELECTION","TAG_NAME","ATTR_DATA_ORIGINAL_OFFSET_START","DATA_ORIGINAL_TEXT_NODE_INDEX","ATTR_DATA_START_END","ATTR_DATA_IS_HIGHLIGHT_NODE","ATTR_DATA_ID","document","cssClass","context","Document","guid","startContainer","endContainer","markerPrefix","markerSuffix","getId","value","setId","_createWrapTemplate","el","createElement","vTrue","className","setAttribute","_createStartEndWrapTemplate","text","textContent","_createStartOrEndContainer","initialNode","prefix","offset","index","wrapper","_getIndexParentIfHas","marklibInstance","_createWrap","optionalLength","optionalIndex","optionalIsSameNode","originalIndex","calcIndex","offsetLength","_getOffsetParentIfHas","wrap","_createSplitContainer","originalElement","_walkTextNodes","func","walkDom","node","Node","TEXT_NODE","nodeType","nodeIsEmpty","walk","start","nextParent","nextParentNode","parentNode","currentParentNode","wrapSiblings","nextSibling","_this","next","found","n","hasAttribute","getAttribute","thisNode","classList","remove","removeAttribute","bind","wrapIf","currentNext","contains","e","children","childNodes","i","length","_markTextSameNode","textNode","startIndex","endIndex","initialText","nodeValue","initialIndex","textBefore","slice","insertBefore","Text","previousSibling","textAfter","_markTextDifferentNode","startOffset","endOffset","startContainerIndex","endContainerIndex","fullTextStartValue","startT","undefined","partTextStartValue","offsetStart","endT","fullTextEndValue","partTextEndValue","offsetParent","_findOriginalOffset","element","lengthElement","parent","parseInt","_renderWithElements","commonAncestor","outer","parents","contextContainer","originalStartOffset","originalEndOffset","nextElementSibling","endContainerContents","closest","r","f","lastChild","result","startContainerPath","getPath","endContainerPath","_renderSelection","_deserializePath","path","pSplit","split","objectIndex","charOffset","container","querySelector","maybeFoundNode","atrOffsetStart","atrIndex","thisOffset","renderWithPath","startPath","endPath","range","createRange","setStart","setEnd","renderWithRange","commonAncestorContainer","_getParentIfHas","thisIndex","attr","obj","__esModule","instance","Constructor","TypeError","defineProperties","target","props","key","prop","configurable","writable","Object","protoProps","staticProps","prototype","defineProperty","DATA_PSEUDO","SERIALIZE_SEPARATOR","nodeListFilter","nodes","Array","filter","s4","Math","floor","random","toString","substring","match","optionalList","indexOf","elms","NodeList","child","cloneNode","sibling","appendChild","calculatedIndex","foundWrapper","maybeIndexOfOriginal","isOriginal","optionalSelector","foundElements","matches","push","selector","name","outerMostElement","reverse","nodeName","toLowerCase","HTMLElement","siblings","nodeIndex","replace"],"mappings":"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","file":"marklib.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Marklib\"] = factory();\n\telse\n\t\troot[\"Marklib\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Marklib\"] = factory();\n\telse\n\t\troot[\"Marklib\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar _interopRequire = __webpack_require__(2)[\"default\"];\n\n\tvar Marklib = _interopRequire(__webpack_require__(1));\n\n\tmodule.exports = Marklib;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* global Node, Text, Marklib, Document */\n\t\"use strict\";\n\n\tvar _classCallCheck = __webpack_require__(3)[\"default\"];\n\n\tvar _createClass = __webpack_require__(4)[\"default\"];\n\n\tvar _interopRequire = __webpack_require__(2)[\"default\"];\n\n\tvar _utilUtil = __webpack_require__(5);\n\n\tvar Util = _interopRequire(_utilUtil);\n\n\tvar ATTR_DATA_ORIGINAL_INDEX = _utilUtil.ATTR_DATA_ORIGINAL_INDEX;\n\tvar DATA_IS_SELECTION = _utilUtil.DATA_IS_SELECTION;\n\n\t/**\n\t * @type {string}\n\t */\n\tvar TAG_NAME = \"x-marker\";\n\t/**\n\t * @type {string}\n\t */\n\tvar ATTR_DATA_ORIGINAL_OFFSET_START = \"data-original-offset-start\";\n\t/**\n\t * @type {string}\n\t */\n\tvar DATA_ORIGINAL_TEXT_NODE_INDEX = \"original-text-node-index\";\n\t/**\n\t * @type {string}\n\t */\n\tvar ATTR_DATA_START_END = \"data-is-start-end\";\n\t/**\n\t * @type {string}\n\t */\n\tvar ATTR_DATA_IS_HIGHLIGHT_NODE = \"data-is-highlight-node\";\n\t/**\n\t * @type {string}\n\t */\n\tvar ATTR_DATA_ID = \"data-selection-id\";\n\n\tvar Marklib = (function () {\n\t    function Marklib(document, cssClass, context) {\n\t        _classCallCheck(this, Marklib);\n\n\t        if (!(document instanceof Document)) {\n\t            throw \"Marklib {0} is required to be a document instance\";\n\t        }\n\t        /**\n\t         * @type {Document}\n\t         */\n\t        this.document = document;\n\n\t        /**\n\t         * ID of rendering, will be set on each element that is part of it\n\t         * @type {String}\n\t         */\n\t        this.id = Util.guid();\n\n\t        /**\n\t         * Class that is set on all highlight nodes\n\t         * @type {String}\n\t         */\n\t        this.cssClass = cssClass || \"marking\";\n\n\t        /**\n\t         * StartContainer\n\t         * @type {Node}\n\t         */\n\t        this.startContainer = null;\n\n\t        /**\n\t         * EndContainer\n\t         * @type {Node}\n\t         */\n\t        this.endContainer = null;\n\n\t        /**\n\t         * Prefix before ID\n\t         * @type {string}\n\t         */\n\t        this.markerPrefix = \"marker-start-\";\n\n\t        /**\n\t         * Suffix before ID\n\t         * @type {string}\n\t         */\n\t        this.markerSuffix = \"marker-end-\";\n\n\t        /**\n\t         * @type {Node}\n\t         */\n\t        this.context = context || this.document;\n\t    }\n\n\t    _createClass(Marklib, {\n\t        getId: {\n\n\t            /**\n\t             * @returns {string} id of this rendering\n\t             */\n\n\t            value: function getId() {\n\t                return this.id;\n\t            }\n\t        },\n\t        setId: {\n\n\t            /**\n\t             * @param {string} id\n\t             * @returns {Marklib}\n\t             */\n\n\t            value: function setId(id) {\n\t                this.id = id;\n\t                return this;\n\t            }\n\t        },\n\t        _createWrapTemplate: {\n\n\t            /**\n\t             * Creates a Template used as a wrapper\n\t             * @returns {Node}\n\t             * @private\n\t             */\n\n\t            value: function _createWrapTemplate() {\n\t                var el = this.document.createElement(TAG_NAME),\n\t                    vTrue = \"true\";\n\t                el.className = this.cssClass;\n\t                el.setAttribute(DATA_IS_SELECTION, vTrue);\n\t                el.setAttribute(ATTR_DATA_ID, this.getId());\n\t                el.setAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE, vTrue);\n\n\t                return el;\n\t            }\n\t        },\n\t        _createStartEndWrapTemplate: {\n\n\t            /**\n\t             * Creates a Template to use as start and end marks\n\t             * @param {String} id\n\t             * @param {String} text\n\t             * @returns {Node}\n\t             * @private\n\t             */\n\n\t            value: function _createStartEndWrapTemplate(id, text) {\n\t                var el = this._createWrapTemplate(),\n\t                    vTrue = \"true\";\n\t                el.setAttribute(ATTR_DATA_START_END, vTrue);\n\t                el.id = id;\n\t                el.textContent = text;\n\t                return el;\n\t            }\n\t        },\n\t        _createStartOrEndContainer: {\n\n\t            /**\n\t             * Creates Start or End Container Element\n\t             * @param initialNode\n\t             * @param prefix\n\t             * @param text\n\t             * @param offset\n\t             * @param index\n\t             * @returns {Node}\n\t             */\n\n\t            value: function _createStartOrEndContainer(initialNode, prefix, text, offset, index) {\n\t                var wrapper = this._createStartEndWrapTemplate(prefix + this.getId(), text);\n\t                wrapper.setAttribute(ATTR_DATA_ORIGINAL_INDEX, Marklib._getIndexParentIfHas(initialNode, index));\n\t                wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offset);\n\t                wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, index);\n\t                wrapper.marklibInstance = this;\n\t                return wrapper;\n\t            }\n\t        },\n\t        _createWrap: {\n\n\t            /**\n\t             * Wraps given element\n\t             * @param {Node} el\n\t             * @param [optionalLength]\n\t             * @param [optionalIndex]\n\t             * @param [optionalIsSameNode]\n\t             * @returns {Node}\n\t             * @private\n\t             */\n\n\t            value: function _createWrap(el, optionalLength, optionalIndex, optionalIsSameNode) {\n\t                var originalIndex = optionalIndex >= 0 ? optionalIndex : Util.calcIndex(el);\n\t                var wrapper = this._createWrapTemplate();\n\t                wrapper.setAttribute(ATTR_DATA_ORIGINAL_INDEX, Marklib._getIndexParentIfHas(el, originalIndex));\n\t                var offsetLength = optionalLength >= 0 ? optionalLength : Marklib._getOffsetParentIfHas(el);\n\t                wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offsetLength);\n\n\t                // Save a reference to original text node in wrapper\n\t                wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, originalIndex);\n\n\t                // save this marker instance to given node\n\t                wrapper.marklibInstance = this;\n\n\t                if (optionalIsSameNode) {\n\t                    wrapper.setAttribute(ATTR_DATA_START_END, ATTR_DATA_START_END);\n\t                }\n\n\t                return Util.wrap(el, wrapper);\n\t            }\n\t        },\n\t        _createSplitContainer: {\n\n\t            /**\n\t             * Create split container element\n\t             * @param originalElement {Node} original text node element that is created a wrapper for\n\t             * @param index\n\t             * @param offset\n\t             * @returns {*|jQuery|Node}\n\t             */\n\n\t            value: function _createSplitContainer(originalElement, index, offset) {\n\t                var wrapper = this.document.createElement(TAG_NAME),\n\t                    vTrue = \"true\";\n\t                wrapper.setAttribute(DATA_IS_SELECTION, vTrue);\n\t                wrapper.setAttribute(ATTR_DATA_ORIGINAL_INDEX, Marklib._getIndexParentIfHas(originalElement, index));\n\t                wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offset);\n\t                wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, index);\n\t                return wrapper;\n\t            }\n\t        },\n\t        _walkTextNodes: {\n\n\t            /**\n\t             * Extracts all TextNodes inside a container\n\t             * @param {Node} el\n\t             * @returns {Array.<Text>}\n\t             */\n\n\t            value: function _walkTextNodes(el, func) {\n\t                this.walkDom(el, function (node) {\n\t                    if (Node.TEXT_NODE === node.nodeType && !Util.nodeIsEmpty(node)) {\n\t                        func(node);\n\t                    }\n\t                    return true;\n\t                });\n\t            }\n\t        },\n\t        walk: {\n\n\t            /**\n\t             * Walks the tree\n\t             * @param start\n\t             * @param endContainer\n\t             * @param nextParent\n\t             */\n\n\t            value: function walk(start, endContainer, nextParent) {\n\t                var nextParentNode = start;\n\t                while (nextParentNode && nextParentNode !== nextParent.parentNode) {\n\t                    var currentParentNode = nextParentNode;\n\t                    nextParentNode = nextParentNode.parentNode;\n\t                    if (this.wrapSiblings(currentParentNode.nextSibling, endContainer)) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t        },\n\t        wrapSiblings: {\n\n\t            /**\n\t             * Will Wrap all textNode siblings of a container (start) inside a defined Element (like a span)\n\t             * If an Element node is found, it will wrap all children of this node inside a element as well.\n\t             * It will stop if endContainer is found as a node\n\t             *\n\t             * @param {Node} start\n\t             * @param {Node} endContainer\n\t             * @returns {boolean} (true if endContainer was found)\n\t             */\n\n\t            value: function wrapSiblings(start, endContainer) {\n\t                var _this = this;\n\n\t                var next = start;\n\t                var found = false;\n\n\t                // Capsule some logic\n\t                var wrap = (function (n) {\n\t                    if (n.parentNode.hasAttribute(ATTR_DATA_START_END) && n.parentNode.hasAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE) && n.parentNode.getAttribute(ATTR_DATA_ID) == _this.getId()) {\n\t                        var thisNode = _this._createWrap(n).parentNode;\n\t                        thisNode.classList.remove(_this.cssClass);\n\t                        thisNode.removeAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE);\n\t                    } else {\n\t                        _this._createWrap(n);\n\t                    }\n\t                }).bind(this);\n\n\t                var wrapIf = function (n) {\n\t                    if (!Util.nodeIsEmpty(n)) {\n\t                        wrap(n);\n\t                    }\n\t                };\n\t                while (null !== next && next !== endContainer) {\n\t                    var currentNext = next;\n\t                    next = next.nextSibling;\n\t                    // Found a text node, directly wrap inside a span\n\t                    if (Node.TEXT_NODE === currentNext.nodeType) {\n\t                        wrapIf(currentNext);\n\t                    } else {\n\t                        if (currentNext.contains(endContainer)) {\n\t                            this.walkDom(currentNext, function (e) {\n\t                                if (e === endContainer) {\n\t                                    return false;\n\t                                }\n\t                                if (Node.TEXT_NODE === e.nodeType) {\n\t                                    wrapIf(e);\n\t                                }\n\t                                return true;\n\t                            });\n\t                            found = true;\n\t                        } else {\n\t                            this._walkTextNodes(currentNext, function (el) {\n\t                                wrapIf(el);\n\t                            });\n\t                        }\n\t                        if (found) {\n\t                            return true;\n\t                        }\n\t                    }\n\t                }\n\t                return found;\n\t            }\n\t        },\n\t        walkDom: {\n\n\t            /**\n\t             * Recursively walks the dom tree unless func returns false\n\t             * This is a lot more efficient then using any jQuery operations\n\t             *\n\t             * Applies node to function\n\t             * @param node\n\t             * @param func\n\t             * @returns {*}\n\t             */\n\n\t            value: function walkDom(node, func) {\n\t                if (!node) {\n\t                    return false;\n\t                }\n\t                var children = node.childNodes;\n\t                if (!children) {\n\t                    return false;\n\t                }\n\t                for (var i = 0; i < children.length; i++) {\n\t                    if (!this.walkDom(children[i], func)) {\n\t                        return false;\n\t                    }\n\t                }\n\t                return func(node);\n\t            }\n\t        },\n\t        _markTextSameNode: {\n\n\t            /**\n\t             * Marks text of the same node\n\t             * @param {Node} textNode\n\t             * @param {int} startIndex\n\t             * @param {int} endIndex\n\t             * @private\n\t             */\n\n\t            value: function _markTextSameNode(textNode, startIndex, endIndex) {\n\t                var initialText = textNode.nodeValue;\n\t                var initialIndex = Util.calcIndex(textNode);\n\t                if (!initialText) {\n\t                    return false;\n\t                }\n\t                //If there is an unmarked part in the beginning of the text node,\n\t                //cut off that part and put it into it's own textnode.\n\t                if (startIndex > 0) {\n\t                    var textBefore = initialText.slice(0, startIndex);\n\t                    textNode.parentNode.insertBefore(new Text(textBefore), textNode);\n\t                    // wrap cutted text node:\n\t                    Util.wrap(textNode.previousSibling, this._createSplitContainer(textNode, initialIndex, Marklib._getOffsetParentIfHas(textNode)));\n\t                }\n\t                //If there is an unmarked part at the end of the text node,\n\t                //cut off that part and put it into it's own textnode.\n\t                if (endIndex < initialText.length) {\n\t                    var textAfter = initialText.slice(endIndex, initialText.length);\n\t                    textNode.parentNode.insertBefore(new Text(textAfter), textNode.nextSibling);\n\n\t                    Util.wrap(textNode.nextSibling, this._createSplitContainer(textNode, initialIndex, Marklib._getOffsetParentIfHas(textNode) + endIndex));\n\t                }\n\n\t                //Cutoff the unmarked parts and wrap the textnode into a span.\n\t                textNode.nodeValue = initialText.slice(startIndex, endIndex);\n\t                this.startContainer = this._createWrap(textNode, Marklib._getOffsetParentIfHas(textNode) + startIndex, initialIndex, true).parentNode;\n\t                this.endContainer = this.startContainer;\n\t                return this.startContainer;\n\t            }\n\t        },\n\t        _markTextDifferentNode: {\n\n\t            /**\n\t             * Marks text of end and start containers if start and end nodes are different\n\t             * Important: There might be no end container!\n\t             *\n\t             * @param {Node} startContainer\n\t             * @param {Node} endContainer\n\t             * @param {int} startOffset\n\t             * @param {int} endOffset\n\t             * @returns {{startT: (Node), endT: (Node)}}\n\t             * @private\n\t             */\n\n\t            value: function _markTextDifferentNode(startContainer, endContainer, startOffset, endOffset) {\n\t                // Get current for both start and end:\n\t                var startContainerIndex = Util.calcIndex(startContainer);\n\t                var endContainerIndex = Util.calcIndex(endContainer);\n\n\t                // Split text\n\t                var fullTextStartValue = startContainer.nodeValue;\n\t                // init with startContainer because we may have not a text node here\n\t                var startT = startContainer;\n\n\t                if (undefined !== fullTextStartValue) {\n\t                    var partTextStartValue = fullTextStartValue.slice(startOffset, fullTextStartValue.length);\n\t                    // Set new text to start node\n\t                    startContainer.nodeValue = fullTextStartValue.slice(0, startOffset);\n\n\t                    var offsetStart = Marklib._getOffsetParentIfHas(startContainer);\n\t                    // Create a new node for splitted text, offset is the length of new startContainer.nodeValue:\n\t                    startT = this._createStartOrEndContainer(startContainer, this.markerPrefix, partTextStartValue, offsetStart === startOffset ? offsetStart : offsetStart + startOffset, startContainerIndex);\n\t                    // Append this node after startContainer\n\t                    startContainer.parentNode.insertBefore(startT, startContainer.nextSibling);\n\t                    this.startContainer = startT;\n\n\t                    if (startContainer.nodeValue) {\n\t                        // Wrap start container in detection node, offset is always 0 or parent offset.\n\t                        Util.wrap(startContainer, this._createSplitContainer(startContainer, startContainerIndex, Marklib._getOffsetParentIfHas(startContainer)));\n\t                    }\n\t                }\n\n\t                // init with endContainer because we may have not a text node here\n\t                var endT = endContainer;\n\n\t                // 2. Extract end Text node,\n\t                var fullTextEndValue = endContainer.nodeValue;\n\t                // It's possible that end container value is null (if a whole paragraph is marked)\n\t                if (undefined !== fullTextEndValue) {\n\t                    // Split text\n\t                    var partTextEndValue = fullTextEndValue.slice(0, endOffset);\n\t                    endContainer.nodeValue = fullTextEndValue.slice(endOffset, fullTextEndValue.length);\n\t                    // End Container start offset is always 0 or parent offset.\n\t                    endT = this._createStartOrEndContainer(endContainer, this.markerSuffix, partTextEndValue, Marklib._getOffsetParentIfHas(endContainer), endContainerIndex);\n\n\t                    endContainer.parentNode.insertBefore(endT, endContainer);\n\t                    this.endContainer = endT;\n\t                    var offsetParent = Marklib._getOffsetParentIfHas(endContainer);\n\t                    Util.wrap(endContainer, this._createSplitContainer(endContainer, endContainerIndex, offsetParent === endOffset ? offsetParent : offsetParent + endOffset));\n\t                }\n\n\t                return { startT: startT, endT: endT };\n\t            }\n\t        },\n\t        _findOriginalOffset: {\n\n\t            /**\n\t             * Will return the original first offset\n\t             * @param element\n\t             * @returns {int}\n\t             * @private\n\t             */\n\n\t            value: function _findOriginalOffset(element) {\n\t                if (!element.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) {\n\t                    return 0;\n\t                }\n\t                var lengthElement = Util.parent(element, \"[\" + ATTR_DATA_ORIGINAL_OFFSET_START + \"]\");\n\t                return lengthElement ? parseInt(lengthElement.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) : 0;\n\t            }\n\t        },\n\t        _renderWithElements: {\n\n\t            /**\n\t             * Renders a selection\n\t             * @param {Node} startContainer\n\t             * @param {Node} endContainer\n\t             * @param {Node} commonAncestor\n\t             * @param {int} startOffset\n\t             * @param {int} endOffset\n\t             * @returns {{startOffset: (int), endOffset: (int)}} the original offsets found\n\t             * @private\n\t             */\n\n\t            value: function _renderWithElements(startContainer, endContainer, commonAncestor, startOffset, endOffset) {\n\t                var outer = Util.parents(startContainer, commonAncestor);\n\t                outer = outer[outer.length - 1];\n\t                var contextContainer = outer ? outer : commonAncestor;\n\n\t                // Same Element, means the selection is fully contained in a discrete area, start and endpoint have the same parent\n\t                // but are different nodes:\n\n\t                // Start and End offset have to be recalculated because dom might be already changed by highlighting in given node\n\t                // 1: First detect real start offset in startContainer:\n\n\t                // That works by selecting the highest wrapper and get original-offset-start data element, see \"findOriginalOffset\"\n\t                // So first select that container:\n\t                var originalStartOffset = this._findOriginalOffset(startContainer);\n\t                var originalEndOffset = this._findOriginalOffset(endContainer);\n\n\t                // We may run into Browser Bugs:\n\n\t                // If both are not text nodes, use next sibling as endContainer\n\t                if (startContainer.nodeType !== Node.TEXT_NODE && endContainer.nodeType !== Node.TEXT_NODE) {\n\t                    if (startContainer === endContainer) {\n\t                        endContainer = endContainer.nextElementSibling || endContainer;\n\t                    }\n\t                }\n\t                // IF start/end container is not type of text, select first child text node:\n\t                // We run in some bugs with firefox here that selects no text-nodes sometimes, trying to fix this here\n\t                // Sometimes does not work correctly... (specially when DOM was modified)\n\t                if (startContainer.nodeType !== Node.TEXT_NODE) {\n\t                    this.walkDom(startContainer, function (el) {\n\t                        if (el.nodeType === Node.TEXT_NODE) {\n\t                            startContainer = el;\n\t                            return false;\n\t                        }\n\t                        return true;\n\t                    });\n\t                }\n\n\t                if (endContainer.nodeType !== Node.TEXT_NODE) {\n\t                    // Get the last text node:\n\t                    var endContainerContents = Util.closest(startContainer, \":not([\" + DATA_IS_SELECTION + \"])\").childNodes;\n\t                    if (endContainerContents.length) {\n\t                        var r = endContainerContents[endContainerContents.length - 1];\n\t                        if (r.nodeType === Node.TEXT_NODE) {\n\t                            endContainer = r;\n\t                            endOffset = r.length;\n\t                        } else {\n\t                            var f = r.lastChild;\n\t                            while (f !== null) {\n\t                                if (f && f.nodeType === Node.TEXT_NODE) {\n\t                                    endContainer = f;\n\t                                    endOffset = f.length;\n\t                                    if (f.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) {\n\t                                        endOffset = parseInt(f.parentNode.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) + endOffset;\n\t                                    }\n\t                                }\n\t                                f = f.lastChild;\n\t                            }\n\t                        }\n\t                    }\n\t                    // still no textNode?\n\t                    if (endContainer.nodeType !== Node.TEXT_NODE) {\n\t                        throw \"Could not found endContainer, highlighting would be unstable\";\n\t                    }\n\t                }\n\n\t                var result = {\n\t                    // Real offset is calculated by relative length and absolute length\n\t                    startOffset: originalStartOffset + startOffset,\n\t                    endOffset: originalEndOffset + endOffset,\n\t                    // get the path for this selection\n\t                    startContainerPath: Util.getPath(startContainer, this.context),\n\t                    endContainerPath: Util.getPath(endContainer, this.context)\n\t                };\n\n\t                this._renderSelection(startContainer, endContainer, startOffset, endOffset, contextContainer, outer);\n\n\t                return result;\n\t            }\n\t        },\n\t        _renderSelection: {\n\n\t            /**\n\t             * Renders a given selection\n\t             *\n\t             * @param {Node} startContainer\n\t             * @param {Node} endContainer\n\t             * @param {int} startOffset\n\t             * @param {int} endOffset\n\t             * @param {Node} contextContainer\n\t             * @param {Node} outer\n\t             * @private\n\t             */\n\n\t            value: function _renderSelection(startContainer, endContainer, startOffset, endOffset, contextContainer, outer) {\n\n\t                // if start and end-container are the same, mark text on the same node\n\t                if (startContainer === endContainer) {\n\t                    this._markTextSameNode(startContainer, startOffset, endOffset);\n\t                } else {\n\t                    var result = this._markTextDifferentNode(startContainer, endContainer, startOffset, endOffset);\n\t                    if (!outer) {\n\t                        this.wrapSiblings(result.startT.nextSibling, endContainer);\n\t                    } else {\n\t                        this.walk(result.startT, endContainer, contextContainer);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t        _deserializePath: {\n\n\t            /**\n\t             * Deserializes a specific path and finds the right textnodes\n\t             * This even works when DOM has been manipulated before by `marklib`\n\t             * @param {string} path the serialized path (including offsets)\n\t             * @return {Node}\n\t             * @private\n\t             */\n\n\t            value: function _deserializePath(path) {\n\t                var pSplit = path.split(\";\"),\n\t                    p = pSplit[0],\n\t                    objectIndex = parseInt(pSplit[1]),\n\t                    charOffset = parseInt(pSplit[2]),\n\t                    container = this.context.querySelector(p),\n\t                    maybeFoundNode = null;\n\t                this.walkDom(container, function (n) {\n\t                    if (n.nodeType === Node.TEXT_NODE) {\n\t                        var atrOffsetStart = n.parentNode.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START);\n\t                        atrOffsetStart = null === atrOffsetStart ? 0 : atrOffsetStart;\n\t                        var atrIndex = n.parentNode.getAttribute(ATTR_DATA_ORIGINAL_INDEX);\n\t                        atrIndex = null === atrIndex ? Util.calcIndex(n) : atrIndex;\n\t                        if (atrIndex == objectIndex && charOffset >= atrOffsetStart && parseInt(atrOffsetStart) + n.length >= charOffset) {\n\t                            var thisOffset = n.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START) ? charOffset - parseInt(n.parentNode.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) : charOffset;\n\t                            maybeFoundNode = { node: n, offset: thisOffset };\n\t                            return false;\n\t                        }\n\t                    } else {\n\t                        return true;\n\t                    }\n\t                    return true;\n\t                });\n\n\t                return maybeFoundNode;\n\t            }\n\t        },\n\t        renderWithPath: {\n\n\t            /**\n\t             * Prepares to render a Selection with path selectors\n\t             * ```\n\t             * A Path looks like this:\n\t             *\n\t             * #selector;#textnode;#offset\n\t             * ``\n\t             * @param {string} startPath\n\t             * @param {string} endPath\n\t             * @returns {*}\n\t             */\n\n\t            value: function renderWithPath(startPath, endPath) {\n\t                var startContainer = this._deserializePath(startPath);\n\t                var endContainer = this._deserializePath(endPath);\n\t                if (startContainer && endContainer && startContainer.node && endContainer.node) {\n\t                    var range = document.createRange();\n\t                    range.setStart(startContainer.node, startContainer.offset);\n\t                    range.setEnd(endContainer.node, endContainer.offset);\n\t                    this.renderWithRange(range);\n\t                    return range;\n\t                }\n\t                throw \"Could not find start- and/or end-container in document\";\n\t            }\n\t        },\n\t        renderWithRange: {\n\n\t            /**\n\t             * Prepares a selection with a range object\n\t             * @param {Range} range\n\t             * @returns {*}\n\t             */\n\n\t            value: function renderWithRange(range) {\n\t                return this._renderWithElements(range.startContainer, range.endContainer, range.commonAncestorContainer, range.startOffset, range.endOffset);\n\t            }\n\t        }\n\t    }, {\n\t        _getParentIfHas: {\n\n\t            /**\n\t             * @param {Node} container\n\t             * @param {int} thisIndex\n\t             * @param {string} attr\n\t             * @returns {int}\n\t             * @private\n\t             */\n\n\t            value: function _getParentIfHas(container, thisIndex, attr) {\n\t                var p = container.parentNode;\n\t                var index = parseInt(p.getAttribute(attr));\n\t                return index > thisIndex ? index : thisIndex;\n\t            }\n\t        },\n\t        _getIndexParentIfHas: {\n\n\t            /**\n\t             * @param {Node} container\n\t             * @param {int} thisIndex\n\t             * @returns {int} index of parent or original\n\t             * @private\n\t             */\n\n\t            value: function _getIndexParentIfHas(container, thisIndex) {\n\t                return Marklib._getParentIfHas(container, thisIndex, ATTR_DATA_ORIGINAL_INDEX);\n\t            }\n\t        },\n\t        _getOffsetParentIfHas: {\n\n\t            /**\n\t             * @param container\n\t             * @returns {int} offset start of parent if has, else 0\n\t             */\n\n\t            value: function _getOffsetParentIfHas(container) {\n\t                return Marklib._getParentIfHas(container, ATTR_DATA_ORIGINAL_OFFSET_START);\n\t            }\n\t        }\n\t    });\n\n\t    return Marklib;\n\t})();\n\n\tmodule.exports = Marklib;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports[\"default\"] = function (obj) {\n\t  return obj && obj.__esModule ? obj[\"default\"] : obj;\n\t};\n\n\texports.__esModule = true;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports[\"default\"] = function (instance, Constructor) {\n\t  if (!(instance instanceof Constructor)) {\n\t    throw new TypeError(\"Cannot call a class as a function\");\n\t  }\n\t};\n\n\texports.__esModule = true;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports[\"default\"] = (function () {\n\t  function defineProperties(target, props) {\n\t    for (var key in props) {\n\t      var prop = props[key];\n\t      prop.configurable = true;\n\t      if (prop.value) prop.writable = true;\n\t    }\n\n\t    Object.defineProperties(target, props);\n\t  }\n\n\t  return function (Constructor, protoProps, staticProps) {\n\t    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t    if (staticProps) defineProperties(Constructor, staticProps);\n\t    return Constructor;\n\t  };\n\t})();\n\n\texports.__esModule = true;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar _classCallCheck = __webpack_require__(3)[\"default\"];\n\n\tvar _createClass = __webpack_require__(4)[\"default\"];\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t/* global Node, NodeList */\n\n\t/**\n\t * @type {string}\n\t */\n\tvar ATTR_DATA_ORIGINAL_INDEX = \"data-original-index\";\n\texports.ATTR_DATA_ORIGINAL_INDEX = ATTR_DATA_ORIGINAL_INDEX;\n\t/**\n\t * @type {string}\n\t */\n\tvar DATA_PSEUDO = \"data-is-pseudo\";\n\texports.DATA_PSEUDO = DATA_PSEUDO;\n\t/**\n\t * @type {string}\n\t */\n\tvar DATA_IS_SELECTION = \"data-is-selection\";\n\texports.DATA_IS_SELECTION = DATA_IS_SELECTION;\n\t/**\n\t * @type {string}\n\t */\n\tvar SERIALIZE_SEPARATOR = \";\";\n\n\t/**\n\t * Utility class\n\t * Contains DOM/Node manipulation helpers\n\t */\n\n\tvar Util = (function () {\n\t    function Util() {\n\t        _classCallCheck(this, Util);\n\t    }\n\n\t    _createClass(Util, null, {\n\t        nodeListFilter: {\n\t            /**\n\t             * Filter for a NodeList\n\t             * @param {NodeList} nodes\n\t             * @param {Function} func\n\t             * @returns {Array.<HTMLElement>}\n\t             */\n\n\t            value: function nodeListFilter(nodes, func) {\n\t                return Array.prototype.filter.call(nodes || [], func);\n\t            }\n\t        },\n\t        guid: {\n\n\t            /**\n\t             * Generates a unique id\n\t             * @return {String}\n\t             */\n\n\t            value: function guid() {\n\t                function s4() {\n\t                    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);\n\t                }\n\n\t                return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n\t            }\n\t        },\n\t        nodeIsEmpty: {\n\n\t            /**\n\t             * Checks if a given node is empty\n\t             * @param {HTMLElement} node\n\t             * @returns {*}\n\t             */\n\n\t            value: function nodeIsEmpty(node) {\n\t                return node.nodeValue.match(/^[\\s]*$/g);\n\t            }\n\t        },\n\t        index: {\n\n\t            /**\n\t             * @param {HTMLElement} node\n\t             * @param [optionalList]\n\t             * @return {int} the index of this node in context to it's siblings\n\t             */\n\n\t            value: function index(node, optionalList) {\n\t                var children = optionalList || (node.nodeType === Node.TEXT_NODE ? node.parentNode.childNodes : node.parentNode.children);\n\t                return Array.prototype.indexOf.call(children || [], node);\n\t            }\n\t        },\n\t        wrap: {\n\n\t            /**\n\t             * Wraps given `elms` in given `wrapper`\n\t             *\n\t             * @param {HTMLElement} wrapper\n\t             * @param {HTMLElement|Array.<HTMLElement>} elms\n\t             * @return {HTMLElement}\n\t             */\n\n\t            value: function wrap(elms, wrapper) {\n\t                // Convert `elms` to an array, if necessary.\n\t                if (!(elms instanceof NodeList || elms instanceof Array)) elms = [elms];\n\t                for (var i = elms.length - 1; i >= 0; i--) {\n\t                    var child = i > 0 ? wrapper.cloneNode(true) : wrapper;\n\t                    var el = elms[i];\n\t                    // Cache the current parent and sibling.\n\t                    var parent = el.parentNode,\n\t                        sibling = el.nextSibling;\n\n\t                    child.appendChild(el);\n\t                    if (sibling) {\n\t                        parent.insertBefore(child, sibling);\n\t                    } else {\n\t                        parent.appendChild(child);\n\t                    }\n\t                }\n\t                return wrapper;\n\t            }\n\t        },\n\t        calcIndex: {\n\n\t            /**\n\t             * Will calculate an index depending on an already modified dom by marklib\n\t             * @param {HTMLElement} node\n\t             * @returns {int|boolean}\n\t             */\n\n\t            value: function calcIndex(node) {\n\t                var calculatedIndex = 0;\n\t                var foundWrapper = false;\n\t                var nodes = node.childNodes,\n\t                    length = nodes.length;\n\t                for (var thisIndex = 0; thisIndex < length; thisIndex++) {\n\t                    var el = nodes[thisIndex];\n\t                    if (el === node) {\n\t                        return false;\n\t                    }\n\t                    var maybeIndexOfOriginal = el.getAttribute(ATTR_DATA_ORIGINAL_INDEX);\n\t                    var isOriginal = maybeIndexOfOriginal !== undefined;\n\t                    // Important: do not include pseudo elements\n\t                    if (el !== node && (el.nodeType !== Node.TEXT_NODE || isOriginal) && !el.hasAttribute(DATA_PSEUDO)) {\n\t                        if (isOriginal) {\n\t                            calculatedIndex = parseInt(maybeIndexOfOriginal);\n\t                            foundWrapper = true;\n\t                        } else {\n\t                            calculatedIndex++;\n\t                        }\n\t                    }\n\t                }\n\t                return foundWrapper ? calculatedIndex : Util.index(node);\n\t            }\n\t        },\n\t        parents: {\n\n\t            /**\n\t             * @param {HTMLElement} el\n\t             * @param {String} [optionalSelector] will test given element against a selector\n\t             *  if matches, returns this element immediately\n\t             * @return {Array.<HTMLElement>} an array of all found parents of given element (and optional selector)\n\t             */\n\n\t            value: function parents(el, optionalSelector) {\n\t                var element = el;\n\t                var foundElements = [];\n\t                while (element.parentNode !== null) {\n\t                    element = element.parentNode;\n\t                    if (optionalSelector && (element === optionalSelector || typeof optionalSelector === \"string\" && element.matches && element.matches(optionalSelector))) {\n\t                        foundElements.push(element);\n\t                    } else if (!optionalSelector) {\n\t                        foundElements.push(element);\n\t                    }\n\t                }\n\t                return foundElements;\n\t            }\n\t        },\n\t        parent: {\n\n\t            /**\n\t             * Finds a parent node (the closest) with a given selector\n\t             * @param {Node} el\n\t             * @param {String} selector\n\t             * @returns {*}\n\t             */\n\n\t            value: function parent(el, selector) {\n\t                var element = el;\n\t                while (element.parentNode !== null) {\n\t                    element = element.parentNode;\n\t                    if (element.matches && element.matches(selector)) {\n\t                        return element;\n\t                    }\n\t                }\n\t                return false;\n\t            }\n\t        },\n\t        closest: {\n\t            value: function closest(el, selector) {\n\t                var element = el;\n\t                while (element !== null) {\n\t                    if (element.matches && element.matches(selector)) {\n\t                        return element;\n\t                    }\n\t                    element = element.parentNode;\n\t                }\n\t                return false;\n\t            }\n\t        },\n\t        getPath: {\n\n\t            /**\n\t             * Determines the correct paths and excludes all `marklib` generated content\n\t             * @param {HTMLElement} el\n\t             * @param {HTMLElement} [context] if given extraction path is relative to this element\n\t             * @returns {*}\n\t             */\n\n\t            value: function getPath(el, context) {\n\t                var path = null,\n\t                    node = el;\n\n\t                while (node) {\n\t                    var name = null;\n\t                    // If node is a text-node, save index\n\t                    if (Node.TEXT_NODE === node.nodeType) {\n\n\t                        /* Because nodes may wrapped inside a highlighting node, we need to find the original index that was\n\t                         * valid before the dom changes. We store the last known index position inside all wrapper elements\n\t                         * We select the outermost\n\t                         */\n\n\t                        // Extract original index of this node:\n\t                        // Outer most data-original-index is original index\n\t                        var outerMostElement = Util.parents(node, \"[\" + ATTR_DATA_ORIGINAL_INDEX + \"]\").reverse()[0];\n\t                        // if element is not yet wrapped in span, recalculate index based on parent container:\n\t                        // We have to do this because text node indexes != element indexes...\n\t                        var calculatedIndex = 0;\n\t                        if (!outerMostElement) {\n\t                            calculatedIndex = Util.calcIndex(node);\n\t                        }\n\t                        var index = outerMostElement ? parseInt(outerMostElement.getAttribute(ATTR_DATA_ORIGINAL_INDEX)) : calculatedIndex;\n\t                        name = SERIALIZE_SEPARATOR + index;\n\t                    } else {\n\t                        name = node.nodeName;\n\t                    }\n\n\t                    if (!name) break;\n\n\t                    name = name.toLowerCase();\n\n\t                    var parent = node.parentNode;\n\t                    if (node instanceof HTMLElement && node.hasAttribute(DATA_IS_SELECTION)) {\n\t                        node = parent;\n\t                        continue;\n\t                    }\n\t                    // Select only siblings that are not part of selection and are of the same type\n\t                    // (because we use nth-of-type selector later)\n\t                    var siblings = Util.nodeListFilter(parent.children, function (el) {\n\t                        return !el.hasAttribute(DATA_IS_SELECTION) && el.nodeName === node.nodeName;\n\t                    }),\n\t                        nodeIndex = Util.index(node, siblings);\n\n\t                    if (siblings.length > 1 && nodeIndex >= 0) {\n\t                        name += \":nth-of-type(\" + (nodeIndex + 1) + \")\";\n\t                    }\n\n\t                    path = name + (path ? \">\" + path : \"\");\n\n\t                    if (parent === context) {\n\t                        break;\n\t                    }\n\n\t                    node = parent;\n\t                }\n\n\t                return path.replace(\"#document>\", \"\").replace(\">;\", \";\");\n\t            }\n\t        }\n\t    });\n\n\t    return Util;\n\t})();\n\n\texports[\"default\"] = Util;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** marklib.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 023d930f2212a10e7181\n **/","import Marklib from 'Marklib';\nexport default Marklib;\n\n\n/** WEBPACK FOOTER **\n ** ./~/jshint-loader!./src/export.js\n **/","/* global Node, Text, Marklib, Document */\nimport Util from 'util/Util';\n\nimport {ATTR_DATA_ORIGINAL_INDEX, DATA_IS_SELECTION} from 'util/Util';\n\n/**\n * @type {string}\n */\nconst TAG_NAME = 'x-marker';\n/**\n * @type {string}\n */\nconst ATTR_DATA_ORIGINAL_OFFSET_START = 'data-original-offset-start';\n/**\n * @type {string}\n */\nconst DATA_ORIGINAL_TEXT_NODE_INDEX = 'original-text-node-index';\n/**\n * @type {string}\n */\nconst ATTR_DATA_START_END = 'data-is-start-end';\n/**\n * @type {string}\n */\nconst ATTR_DATA_IS_HIGHLIGHT_NODE = 'data-is-highlight-node';\n/**\n * @type {string}\n */\nconst ATTR_DATA_ID = 'data-selection-id';\n\nexport default\nclass Marklib {\n\n    constructor(document, cssClass, context) {\n\n        if (!(document instanceof Document)) {\n            throw 'Marklib {0} is required to be a document instance';\n        }\n        /**\n         * @type {Document}\n         */\n        this.document = document;\n\n        /**\n         * ID of rendering, will be set on each element that is part of it\n         * @type {String}\n         */\n        this.id = Util.guid();\n\n        /**\n         * Class that is set on all highlight nodes\n         * @type {String}\n         */\n        this.cssClass = cssClass || 'marking';\n\n        /**\n         * StartContainer\n         * @type {Node}\n         */\n        this.startContainer = null;\n\n        /**\n         * EndContainer\n         * @type {Node}\n         */\n        this.endContainer = null;\n\n        /**\n         * Prefix before ID\n         * @type {string}\n         */\n        this.markerPrefix = 'marker-start-';\n\n        /**\n         * Suffix before ID\n         * @type {string}\n         */\n        this.markerSuffix = 'marker-end-';\n\n        /**\n         * @type {Node}\n         */\n        this.context = context || this.document;\n    }\n\n    /**\n     * @returns {string} id of this rendering\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * @param {string} id\n     * @returns {Marklib}\n     */\n    setId(id) {\n        this.id = id;\n        return this;\n    }\n\n    /**\n     * @param {Node} container\n     * @param {int} thisIndex\n     * @param {string} attr\n     * @returns {int}\n     * @private\n     */\n    static _getParentIfHas(container, thisIndex, attr) {\n        var p = container.parentNode;\n        var index = parseInt(p.getAttribute(attr));\n        return index > thisIndex ? index : thisIndex;\n    }\n\n    /**\n     * @param {Node} container\n     * @param {int} thisIndex\n     * @returns {int} index of parent or original\n     * @private\n     */\n    static _getIndexParentIfHas(container, thisIndex) {\n        return Marklib._getParentIfHas(container, thisIndex, ATTR_DATA_ORIGINAL_INDEX);\n    }\n\n    /**\n     * @param container\n     * @returns {int} offset start of parent if has, else 0\n     */\n    static _getOffsetParentIfHas(container) {\n        return Marklib._getParentIfHas(container, ATTR_DATA_ORIGINAL_OFFSET_START);\n    }\n\n    /**\n     * Creates a Template used as a wrapper\n     * @returns {Node}\n     * @private\n     */\n    _createWrapTemplate() {\n        var el = this.document.createElement(TAG_NAME), vTrue = \"true\";\n        el.className = this.cssClass;\n        el.setAttribute(DATA_IS_SELECTION, vTrue);\n        el.setAttribute(ATTR_DATA_ID, this.getId());\n        el.setAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE, vTrue);\n\n        return el;\n    }\n\n    /**\n     * Creates a Template to use as start and end marks\n     * @param {String} id\n     * @param {String} text\n     * @returns {Node}\n     * @private\n     */\n    _createStartEndWrapTemplate(id, text) {\n        var el = this._createWrapTemplate(), vTrue = \"true\";\n        el.setAttribute(ATTR_DATA_START_END, vTrue);\n        el.id = id;\n        el.textContent = text;\n        return el;\n    }\n\n\n    /**\n     * Creates Start or End Container Element\n     * @param initialNode\n     * @param prefix\n     * @param text\n     * @param offset\n     * @param index\n     * @returns {Node}\n     */\n    _createStartOrEndContainer(initialNode, prefix, text, offset, index) {\n        var wrapper = this._createStartEndWrapTemplate(prefix + this.getId(), text);\n        wrapper.setAttribute(ATTR_DATA_ORIGINAL_INDEX, Marklib._getIndexParentIfHas(initialNode, index));\n        wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offset);\n        wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, index);\n        wrapper.marklibInstance = this;\n        return wrapper;\n    }\n\n    /**\n     * Wraps given element\n     * @param {Node} el\n     * @param [optionalLength]\n     * @param [optionalIndex]\n     * @param [optionalIsSameNode]\n     * @returns {Node}\n     * @private\n     */\n    _createWrap(el, optionalLength, optionalIndex, optionalIsSameNode) {\n        var originalIndex = optionalIndex >= 0 ? optionalIndex : Util.calcIndex(el);\n        var wrapper = this._createWrapTemplate();\n        wrapper.setAttribute(ATTR_DATA_ORIGINAL_INDEX, Marklib._getIndexParentIfHas(el, originalIndex));\n        var offsetLength = optionalLength >= 0 ? optionalLength : Marklib._getOffsetParentIfHas(el);\n        wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offsetLength);\n\n        // Save a reference to original text node in wrapper\n        wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, originalIndex);\n\n        // save this marker instance to given node\n        wrapper.marklibInstance = this;\n\n        if (optionalIsSameNode) {\n            wrapper.setAttribute(ATTR_DATA_START_END, ATTR_DATA_START_END);\n        }\n\n        return Util.wrap(el, wrapper);\n    }\n\n    /**\n     * Create split container element\n     * @param originalElement {Node} original text node element that is created a wrapper for\n     * @param index\n     * @param offset\n     * @returns {*|jQuery|Node}\n     */\n    _createSplitContainer(originalElement, index, offset) {\n        var wrapper = this.document.createElement(TAG_NAME), vTrue = \"true\";\n        wrapper.setAttribute(DATA_IS_SELECTION, vTrue);\n        wrapper.setAttribute(ATTR_DATA_ORIGINAL_INDEX, Marklib._getIndexParentIfHas(originalElement, index));\n        wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offset);\n        wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, index);\n        return wrapper;\n    }\n\n    /**\n     * Extracts all TextNodes inside a container\n     * @param {Node} el\n     * @returns {Array.<Text>}\n     */\n    _walkTextNodes(el, func) {\n        this.walkDom(el, function (node) {\n            if (Node.TEXT_NODE === node.nodeType && !Util.nodeIsEmpty(node)) {\n                func(node);\n            }\n            return true;\n        });\n    }\n\n    /**\n     * Walks the tree\n     * @param start\n     * @param endContainer\n     * @param nextParent\n     */\n    walk(start, endContainer, nextParent) {\n        var nextParentNode = start;\n        while (nextParentNode && nextParentNode !== nextParent.parentNode) {\n            var currentParentNode = nextParentNode;\n            nextParentNode = nextParentNode.parentNode;\n            if (this.wrapSiblings(currentParentNode.nextSibling, endContainer)) {\n                break;\n            }\n        }\n    }\n\n\n    /**\n     * Will Wrap all textNode siblings of a container (start) inside a defined Element (like a span)\n     * If an Element node is found, it will wrap all children of this node inside a element as well.\n     * It will stop if endContainer is found as a node\n     *\n     * @param {Node} start\n     * @param {Node} endContainer\n     * @returns {boolean} (true if endContainer was found)\n     */\n    wrapSiblings(start, endContainer) {\n        var next = start;\n        var found = false;\n\n        // Capsule some logic\n        var wrap = ((n) => {\n            if (n.parentNode.hasAttribute(ATTR_DATA_START_END) &&\n                n.parentNode.hasAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE) &&\n                n.parentNode.getAttribute(ATTR_DATA_ID) == this.getId()) {\n                var thisNode = this._createWrap(n).parentNode;\n                thisNode.classList.remove(this.cssClass);\n                thisNode.removeAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE);\n            } else {\n                this._createWrap(n);\n            }\n        }).bind(this);\n\n        var wrapIf = (n) => {\n            if (!Util.nodeIsEmpty(n)) {\n                wrap(n);\n            }\n        };\n        while (null !== next && next !== endContainer) {\n            var currentNext = next;\n            next = next.nextSibling;\n            // Found a text node, directly wrap inside a span\n            if (Node.TEXT_NODE === currentNext.nodeType) {\n                wrapIf(currentNext);\n            } else {\n                if (currentNext.contains(endContainer)) {\n                    this.walkDom(currentNext, (e) => {\n                        if (e === endContainer) {\n                            return false;\n                        }\n                        if (Node.TEXT_NODE === e.nodeType) {\n                            wrapIf(e);\n                        }\n                        return true;\n                    });\n                    found = true;\n                } else {\n                    this._walkTextNodes(currentNext, (el) => {\n                        wrapIf(el);\n                    });\n                }\n                if (found) {\n                    return true;\n                }\n            }\n        }\n        return found;\n    }\n\n    /**\n     * Recursively walks the dom tree unless func returns false\n     * This is a lot more efficient then using any jQuery operations\n     *\n     * Applies node to function\n     * @param node\n     * @param func\n     * @returns {*}\n     */\n    walkDom(node, func) {\n        if (!node) {\n            return false;\n        }\n        var children = node.childNodes;\n        if (!children) {\n            return false;\n        }\n        for (var i = 0; i < children.length; i++) {\n            if (!this.walkDom(children[i], func)) {\n                return false;\n            }\n        }\n        return func(node);\n    }\n\n    /**\n     * Marks text of the same node\n     * @param {Node} textNode\n     * @param {int} startIndex\n     * @param {int} endIndex\n     * @private\n     */\n    _markTextSameNode(textNode, startIndex, endIndex) {\n        var initialText = textNode.nodeValue;\n        var initialIndex = Util.calcIndex(textNode);\n        if (!initialText) {\n            return false;\n        }\n        //If there is an unmarked part in the beginning of the text node,\n        //cut off that part and put it into it's own textnode.\n        if (startIndex > 0) {\n            var textBefore = initialText.slice(0, startIndex);\n            textNode.parentNode.insertBefore(new Text(textBefore), textNode);\n            // wrap cutted text node:\n            Util.wrap(textNode.previousSibling, this._createSplitContainer(textNode,\n                initialIndex, Marklib._getOffsetParentIfHas(textNode)));\n        }\n        //If there is an unmarked part at the end of the text node,\n        //cut off that part and put it into it's own textnode.\n        if (endIndex < initialText.length) {\n            var textAfter = initialText.slice(endIndex, initialText.length);\n            textNode.parentNode.insertBefore(new Text(textAfter), textNode.nextSibling);\n\n            Util.wrap(textNode.nextSibling, this._createSplitContainer(textNode,\n                initialIndex, Marklib._getOffsetParentIfHas(textNode) + endIndex));\n        }\n\n        //Cutoff the unmarked parts and wrap the textnode into a span.\n        textNode.nodeValue = initialText.slice(startIndex, endIndex);\n        this.startContainer = this._createWrap(textNode,\n            Marklib._getOffsetParentIfHas(textNode) + startIndex, initialIndex, true).parentNode;\n        this.endContainer = this.startContainer;\n        return this.startContainer;\n    }\n\n\n    /**\n     * Marks text of end and start containers if start and end nodes are different\n     * Important: There might be no end container!\n     *\n     * @param {Node} startContainer\n     * @param {Node} endContainer\n     * @param {int} startOffset\n     * @param {int} endOffset\n     * @returns {{startT: (Node), endT: (Node)}}\n     * @private\n     */\n    _markTextDifferentNode(startContainer, endContainer, startOffset, endOffset) {\n        // Get current for both start and end:\n        var startContainerIndex = Util.calcIndex(startContainer);\n        var endContainerIndex = Util.calcIndex(endContainer);\n\n        // Split text\n        var fullTextStartValue = startContainer.nodeValue;\n        // init with startContainer because we may have not a text node here\n        var startT = startContainer;\n\n        if (undefined !== fullTextStartValue) {\n            var partTextStartValue = fullTextStartValue.slice(startOffset, fullTextStartValue.length);\n            // Set new text to start node\n            startContainer.nodeValue = fullTextStartValue.slice(0, startOffset);\n\n            var offsetStart = Marklib._getOffsetParentIfHas(startContainer);\n            // Create a new node for splitted text, offset is the length of new startContainer.nodeValue:\n            startT = this._createStartOrEndContainer(startContainer, this.markerPrefix, partTextStartValue,\n                offsetStart === startOffset ? offsetStart : offsetStart + startOffset, startContainerIndex);\n            // Append this node after startContainer\n            startContainer.parentNode.insertBefore(startT, startContainer.nextSibling);\n            this.startContainer = startT;\n\n            if (startContainer.nodeValue) {\n                // Wrap start container in detection node, offset is always 0 or parent offset.\n                Util.wrap(startContainer, this._createSplitContainer(startContainer, startContainerIndex,\n                    Marklib._getOffsetParentIfHas(startContainer)));\n            }\n        }\n\n        // init with endContainer because we may have not a text node here\n        var endT = endContainer;\n\n        // 2. Extract end Text node,\n        var fullTextEndValue = endContainer.nodeValue;\n        // It's possible that end container value is null (if a whole paragraph is marked)\n        if (undefined !== fullTextEndValue) {\n            // Split text\n            var partTextEndValue = fullTextEndValue.slice(0, endOffset);\n            endContainer.nodeValue = fullTextEndValue.slice(endOffset, fullTextEndValue.length);\n            // End Container start offset is always 0 or parent offset.\n            endT = this._createStartOrEndContainer(endContainer, this.markerSuffix, partTextEndValue,\n                Marklib._getOffsetParentIfHas(endContainer), endContainerIndex);\n\n            endContainer.parentNode.insertBefore(endT, endContainer);\n            this.endContainer = endT;\n            var offsetParent = Marklib._getOffsetParentIfHas(endContainer);\n            Util.wrap(endContainer, this._createSplitContainer(endContainer, endContainerIndex,\n                offsetParent === endOffset ? offsetParent : offsetParent + endOffset));\n        }\n\n        return {startT: startT, endT: endT};\n    }\n\n    /**\n     * Will return the original first offset\n     * @param element\n     * @returns {int}\n     * @private\n     */\n    _findOriginalOffset(element) {\n        if (!element.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) {\n            return 0;\n        }\n        var lengthElement = Util.parent(element, '[' + ATTR_DATA_ORIGINAL_OFFSET_START + ']');\n        return lengthElement ? parseInt(lengthElement.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) : 0;\n    }\n\n    /**\n     * Renders a selection\n     * @param {Node} startContainer\n     * @param {Node} endContainer\n     * @param {Node} commonAncestor\n     * @param {int} startOffset\n     * @param {int} endOffset\n     * @returns {{startOffset: (int), endOffset: (int)}} the original offsets found\n     * @private\n     */\n    _renderWithElements(startContainer, endContainer, commonAncestor, startOffset, endOffset) {\n        var outer = Util.parents(startContainer, commonAncestor);\n        outer = outer[outer.length - 1];\n        var contextContainer = outer ? outer : commonAncestor;\n\n        // Same Element, means the selection is fully contained in a discrete area, start and endpoint have the same parent\n        // but are different nodes:\n\n        // Start and End offset have to be recalculated because dom might be already changed by highlighting in given node\n        // 1: First detect real start offset in startContainer:\n\n        // That works by selecting the highest wrapper and get original-offset-start data element, see \"findOriginalOffset\"\n        // So first select that container:\n        var originalStartOffset = this._findOriginalOffset(startContainer);\n        var originalEndOffset = this._findOriginalOffset(endContainer);\n\n        // We may run into Browser Bugs:\n\n        // If both are not text nodes, use next sibling as endContainer\n        if (startContainer.nodeType !== Node.TEXT_NODE && endContainer.nodeType !== Node.TEXT_NODE) {\n            if (startContainer === endContainer) {\n                endContainer = endContainer.nextElementSibling || endContainer;\n            }\n        }\n        // IF start/end container is not type of text, select first child text node:\n        // We run in some bugs with firefox here that selects no text-nodes sometimes, trying to fix this here\n        // Sometimes does not work correctly... (specially when DOM was modified)\n        if (startContainer.nodeType !== Node.TEXT_NODE) {\n            this.walkDom(startContainer, function (el) {\n                if (el.nodeType === Node.TEXT_NODE) {\n                    startContainer = el;\n                    return false;\n                }\n                return true;\n            });\n        }\n\n        if (endContainer.nodeType !== Node.TEXT_NODE) {\n            // Get the last text node:\n            var endContainerContents = Util.closest(startContainer, ':not([' + DATA_IS_SELECTION + '])').childNodes;\n            if (endContainerContents.length) {\n                var r = endContainerContents[endContainerContents.length - 1];\n                if (r.nodeType === Node.TEXT_NODE) {\n                    endContainer = r;\n                    endOffset = r.length;\n                } else {\n                    var f = r.lastChild;\n                    while (f !== null) {\n                        if (f && f.nodeType === Node.TEXT_NODE) {\n                            endContainer = f;\n                            endOffset = f.length;\n                            if (f.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) {\n                                endOffset = parseInt(f.parentNode\n                                    .getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) + endOffset;\n                            }\n                        }\n                        f = f.lastChild;\n                    }\n                }\n            }\n            // still no textNode?\n            if (endContainer.nodeType !== Node.TEXT_NODE) {\n                throw 'Could not found endContainer, highlighting would be unstable';\n            }\n        }\n\n        var result = {\n            // Real offset is calculated by relative length and absolute length\n            startOffset: originalStartOffset + startOffset,\n            endOffset: originalEndOffset + endOffset,\n            // get the path for this selection\n            startContainerPath: Util.getPath(startContainer, this.context),\n            endContainerPath: Util.getPath(endContainer, this.context)\n        };\n\n        this._renderSelection(startContainer, endContainer, startOffset, endOffset, contextContainer, outer);\n\n        return result;\n    }\n\n    /**\n     * Renders a given selection\n     *\n     * @param {Node} startContainer\n     * @param {Node} endContainer\n     * @param {int} startOffset\n     * @param {int} endOffset\n     * @param {Node} contextContainer\n     * @param {Node} outer\n     * @private\n     */\n    _renderSelection(startContainer, endContainer, startOffset, endOffset, contextContainer, outer) {\n\n        // if start and end-container are the same, mark text on the same node\n        if (startContainer === endContainer) {\n            this._markTextSameNode(startContainer, startOffset, endOffset);\n        } else {\n            var result = this._markTextDifferentNode(startContainer, endContainer, startOffset, endOffset);\n            if (!outer) {\n                this.wrapSiblings(result.startT.nextSibling, endContainer);\n            } else {\n                this.walk(result.startT, endContainer, contextContainer);\n            }\n        }\n    }\n\n\n    /**\n     * Deserializes a specific path and finds the right textnodes\n     * This even works when DOM has been manipulated before by `marklib`\n     * @param {string} path the serialized path (including offsets)\n     * @return {Node}\n     * @private\n     */\n    _deserializePath(path) {\n        var pSplit = path.split(';'), p = pSplit[0],\n            objectIndex = parseInt(pSplit[1]),\n            charOffset = parseInt(pSplit[2]),\n            container = this.context.querySelector(p), maybeFoundNode = null;\n        this.walkDom(container, function (n) {\n            if (n.nodeType === Node.TEXT_NODE) {\n                var atrOffsetStart = n.parentNode.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START);\n                atrOffsetStart = null === atrOffsetStart ? 0 : atrOffsetStart;\n                var atrIndex = n.parentNode.getAttribute(ATTR_DATA_ORIGINAL_INDEX);\n                atrIndex = null === atrIndex ? Util.calcIndex(n) : atrIndex;\n                if (atrIndex == objectIndex && charOffset >= atrOffsetStart &&\n                    ((parseInt(atrOffsetStart) + n.length) >= charOffset)) {\n                    var thisOffset = n.parentNode\n                        .hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START) ? charOffset -\n                    parseInt(n.parentNode\n                        .getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) : charOffset;\n                    maybeFoundNode = {node: n, offset: thisOffset};\n                    return false;\n                }\n            } else {\n                return true;\n            }\n            return true;\n        });\n\n        return maybeFoundNode;\n    }\n\n    /**\n     * Prepares to render a Selection with path selectors\n     * ```\n     * A Path looks like this:\n     *\n     * #selector;#textnode;#offset\n     * ``\n     * @param {string} startPath\n     * @param {string} endPath\n     * @returns {*}\n     */\n    renderWithPath(startPath, endPath) {\n        var startContainer = this._deserializePath(startPath);\n        var endContainer = this._deserializePath(endPath);\n        if (startContainer && endContainer && startContainer.node && endContainer.node) {\n            var range = document.createRange();\n            range.setStart(startContainer.node, startContainer.offset);\n            range.setEnd(endContainer.node, endContainer.offset);\n            this.renderWithRange(range);\n            return range;\n        }\n        throw 'Could not find start- and/or end-container in document';\n    }\n\n\n    /**\n     * Prepares a selection with a range object\n     * @param {Range} range\n     * @returns {*}\n     */\n    renderWithRange(range) {\n        return this._renderWithElements(range.startContainer, range.endContainer,\n            range.commonAncestorContainer, range.startOffset, range.endOffset);\n    }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/jshint-loader!./src/main/Marklib.js\n **/","\"use strict\";\n\nexports[\"default\"] = function (obj) {\n  return obj && obj.__esModule ? obj[\"default\"] : obj;\n};\n\nexports.__esModule = true;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/helpers/interop-require.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nexports[\"default\"] = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nexports.__esModule = true;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/helpers/class-call-check.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\nexports[\"default\"] = (function () {\n  function defineProperties(target, props) {\n    for (var key in props) {\n      var prop = props[key];\n      prop.configurable = true;\n      if (prop.value) prop.writable = true;\n    }\n\n    Object.defineProperties(target, props);\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();\n\nexports.__esModule = true;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/helpers/create-class.js\n ** module id = 4\n ** module chunks = 0\n **/","/* global Node, NodeList */\n\n/**\n * @type {string}\n */\nexport const ATTR_DATA_ORIGINAL_INDEX = 'data-original-index';\n/**\n * @type {string}\n */\nexport const DATA_PSEUDO = 'data-is-pseudo';\n/**\n * @type {string}\n */\nexport const DATA_IS_SELECTION = 'data-is-selection';\n/**\n * @type {string}\n */\nconst SERIALIZE_SEPARATOR = \";\";\n\n/**\n * Utility class\n * Contains DOM/Node manipulation helpers\n */\nexport default\nclass Util {\n    /**\n     * Filter for a NodeList\n     * @param {NodeList} nodes\n     * @param {Function} func\n     * @returns {Array.<HTMLElement>}\n     */\n    static nodeListFilter(nodes, func) {\n        return Array.prototype.filter.call(nodes || [], func);\n    }\n\n\n    /**\n     * Generates a unique id\n     * @return {String}\n     */\n    static guid() {\n        function s4() {\n            return Math.floor((1 + Math.random()) * 0x10000)\n                .toString(16)\n                .substring(1);\n        }\n\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n            s4() + '-' + s4() + s4() + s4();\n    }\n\n    /**\n     * Checks if a given node is empty\n     * @param {HTMLElement} node\n     * @returns {*}\n     */\n    static nodeIsEmpty(node) {\n        return node.nodeValue.match(/^[\\s]*$/g);\n    }\n\n\n    /**\n     * @param {HTMLElement} node\n     * @param [optionalList]\n     * @return {int} the index of this node in context to it's siblings\n     */\n    static index(node, optionalList) {\n        var children = optionalList || (node.nodeType === Node.TEXT_NODE ? node.parentNode.childNodes : node.parentNode.children);\n        return Array.prototype.indexOf.call(children || [], node);\n    }\n\n    /**\n     * Wraps given `elms` in given `wrapper`\n     *\n     * @param {HTMLElement} wrapper\n     * @param {HTMLElement|Array.<HTMLElement>} elms\n     * @return {HTMLElement}\n     */\n    static wrap(elms, wrapper) {\n        // Convert `elms` to an array, if necessary.\n        if (!(elms instanceof NodeList || elms instanceof Array)) elms = [elms];\n        for (var i = elms.length - 1; i >= 0; i--) {\n            var child = (i > 0) ? wrapper.cloneNode(true) : wrapper;\n            var el = elms[i];\n            // Cache the current parent and sibling.\n            var parent = el.parentNode, sibling = el.nextSibling;\n\n            child.appendChild(el);\n            if (sibling) {\n                parent.insertBefore(child, sibling);\n            } else {\n                parent.appendChild(child);\n            }\n        }\n        return wrapper;\n    }\n\n    /**\n     * Will calculate an index depending on an already modified dom by marklib\n     * @param {HTMLElement} node\n     * @returns {int|boolean}\n     */\n    static calcIndex(node) {\n        var calculatedIndex = 0;\n        var foundWrapper = false;\n        var nodes = node.childNodes, length = nodes.length;\n        for (let thisIndex = 0; thisIndex < length; thisIndex++) {\n            var el = nodes[thisIndex];\n            if (el === node) {\n                return false;\n            }\n            var maybeIndexOfOriginal = el.getAttribute(ATTR_DATA_ORIGINAL_INDEX);\n            var isOriginal = maybeIndexOfOriginal !== undefined;\n            // Important: do not include pseudo elements\n            if (el !== node && (el.nodeType !== Node.TEXT_NODE || isOriginal) && !el.hasAttribute(DATA_PSEUDO)) {\n                if (isOriginal) {\n                    calculatedIndex = parseInt(maybeIndexOfOriginal);\n                    foundWrapper = true;\n                } else {\n                    calculatedIndex++;\n                }\n            }\n        }\n        return foundWrapper ? calculatedIndex : Util.index(node);\n    }\n\n    /**\n     * @param {HTMLElement} el\n     * @param {String} [optionalSelector] will test given element against a selector\n     *  if matches, returns this element immediately\n     * @return {Array.<HTMLElement>} an array of all found parents of given element (and optional selector)\n     */\n    static parents(el, optionalSelector) {\n        var element = el;\n        var foundElements = [];\n        while (element.parentNode !== null) {\n            element = element.parentNode;\n            if (optionalSelector && ((element === optionalSelector) ||\n                ( (typeof optionalSelector === 'string') && element.matches && element.matches(optionalSelector)))) {\n                foundElements.push(element);\n            } else if (!optionalSelector) {\n                foundElements.push(element);\n            }\n        }\n        return foundElements;\n    }\n\n    /**\n     * Finds a parent node (the closest) with a given selector\n     * @param {Node} el\n     * @param {String} selector\n     * @returns {*}\n     */\n    static parent(el, selector) {\n        var element = el;\n        while (element.parentNode !== null) {\n            element = element.parentNode;\n            if (element.matches && element.matches(selector)) {\n                return element;\n            }\n        }\n        return false;\n    }\n\n    static closest(el, selector) {\n        var element = el;\n        while (element !== null) {\n            if (element.matches && element.matches(selector)) {\n                return element;\n            }\n            element = element.parentNode;\n        }\n        return false;\n    }\n\n    /**\n     * Determines the correct paths and excludes all `marklib` generated content\n     * @param {HTMLElement} el\n     * @param {HTMLElement} [context] if given extraction path is relative to this element\n     * @returns {*}\n     */\n    static getPath(el, context) {\n        var path = null, node = el;\n\n        while (node) {\n            var name = null;\n            // If node is a text-node, save index\n            if (Node.TEXT_NODE === node.nodeType) {\n\n                /* Because nodes may wrapped inside a highlighting node, we need to find the original index that was\n                 * valid before the dom changes. We store the last known index position inside all wrapper elements\n                 * We select the outermost\n                 */\n\n                // Extract original index of this node:\n                // Outer most data-original-index is original index\n                var outerMostElement = Util.parents(node, '[' + ATTR_DATA_ORIGINAL_INDEX + ']').reverse()[0];\n                // if element is not yet wrapped in span, recalculate index based on parent container:\n                // We have to do this because text node indexes != element indexes...\n                var calculatedIndex = 0;\n                if (!outerMostElement) {\n                    calculatedIndex = Util.calcIndex(node);\n                }\n                var index = outerMostElement ? parseInt(\n                    outerMostElement.getAttribute(ATTR_DATA_ORIGINAL_INDEX)) : calculatedIndex;\n                name = SERIALIZE_SEPARATOR + index;\n            } else {\n                name = node.nodeName;\n            }\n\n            if (!name) break;\n\n            name = name.toLowerCase();\n\n            var parent = node.parentNode;\n            if (node instanceof HTMLElement && node.hasAttribute(DATA_IS_SELECTION)) {\n                node = parent;\n                continue;\n            }\n            // Select only siblings that are not part of selection and are of the same type\n            // (because we use nth-of-type selector later)\n            var siblings = Util.nodeListFilter(parent.children, (el) => {\n                return !el.hasAttribute(DATA_IS_SELECTION) && el.nodeName === node.nodeName;\n            }), nodeIndex = Util.index(node, siblings);\n\n            if (siblings.length > 1 && nodeIndex >= 0) {\n                name += ':nth-of-type(' + (nodeIndex + 1) + ')';\n            }\n\n            path = name + (path ? '>' + path : '');\n\n            if (parent === context) {\n                break;\n            }\n\n            node = parent;\n        }\n\n        return path.replace(\"#document>\", \"\").replace('>;', ';');\n    }\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/jshint-loader!./src/main/util/Util.js\n **/"],"sourceRoot":""}