{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///marklib.min.js","webpack:///webpack/bootstrap 9a09ec5721cb60586071","webpack:///./src/main/modules/Marklib.js","webpack:///./~/babel-runtime/helpers/interop-require-default.js","webpack:///./src/main/Rendering.js","webpack:///./~/babel-runtime/helpers/create-class.js","webpack:///./~/babel-runtime/core-js/object/define-property.js","webpack:///./~/babel-runtime/~/core-js/library/fn/object/define-property.js","webpack:///./~/babel-runtime/~/core-js/library/modules/$.js","webpack:///./~/babel-runtime/~/core-js/library/modules/$.fw.js","webpack:///./~/babel-runtime/helpers/class-call-check.js","webpack:///./src/main/util/Util.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","Object","defineProperty","value","_Rendering","_Rendering2","_utilUtil","_utilUtil2","Rendering","Util","obj","__esModule","default","_createClass","_classCallCheck","TAG_NAME","ATTR_DATA_ORIGINAL_OFFSET_START","DATA_ORIGINAL_TEXT_NODE_INDEX","ATTR_DATA_START_END","ATTR_DATA_IS_HIGHLIGHT_NODE","ATTR_DATA_ID","DOCUMENT_POSITION_CONTAINED_BY","document","cssClass","context","Document","guid","undefined","startContainer","endContainer","markerPrefix","markerSuffix","_onWrappedNodeFunc","key","f","apply","arguments","el","createElement","vTrue","className","setAttribute","DATA_IS_SELECTION","getId","text","_createWrapTemplate","textContent","initialNode","prefix","offset","index","wrapper","_createStartEndWrapTemplate","ATTR_DATA_ORIGINAL_INDEX","_getIndexParentIfHas","marklibInstance","optionalLength","optionalIndex","optionalIsSameNode","originalIndex","calcIndex","offsetLength","_getOffsetParentIfHas","wrap","_callOnWrappedNode","originalElement","func","walkDom","node","Node","TEXT_NODE","nodeType","nodeIsEmpty","start","nextParent","nextParentNode","parentNode","currentParentNode","wrapSiblings","nextSibling","_this","next","found","n","hasAttribute","getAttribute","thisNode","_createWrap","classList","remove","removeAttribute","bind","wrapIf","walkIfContained","e","walkIfNotContained","currentNext","compareDocumentPosition","_walkTextNodes","children","childNodes","i","length","textNode","startIndex","endIndex","initialText","nodeValue","initialIndex","textBefore","slice","insertBefore","createTextNode","previousSibling","_createSplitContainer","textAfter","startOffset","endOffset","startContainerIndex","endContainerIndex","fullTextStartValue","startT","partTextStartValue","offsetStart","_createStartOrEndContainer","endT","fullTextEndValue","partTextEndValue","offsetParent","element","lengthElement","parent","parseInt","commonAncestor","withoutResult","outer","parents","contextContainer","originalStartOffset","_findOriginalOffset","originalEndOffset","nextElementSibling","endContainerContents","closest","r","lastChild","result","startContainerPath","getPath","endContainerPath","_renderSelection","_markTextSameNode","_markTextDifferentNode","walk","path","pSplit","split","objectIndex","charOffset","container","trim","querySelector","maybeFoundNode","atrOffsetStart","atrIndex","thisOffset","startPath","endPath","_deserializePath","range","createRange","setStart","setEnd","toString","renderWithRange","renderWithPath","_renderWithElements","commonAncestorContainer","thisIndex","_Object$defineProperty","defineProperties","target","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","prototype","$","it","desc","setDesc","toInteger","isNaN","floor","ceil","bitmap","simpleSet","object","createDefiner","DESC","isObject","isFunction","assertDefined","TypeError","global","self","Function","core","hasOwnProperty","Math","max","min","get","a","hide","g","html","documentElement","that","toLength","toIndex","has","create","getProto","getPrototypeOf","getDesc","getOwnPropertyDescriptor","setDescs","getKeys","keys","getNames","getOwnPropertyNames","getSymbols","getOwnPropertySymbols","ES5Object","toObject","def","set","Symbol","each","forEach","__e","__g","FW","instance","DATA_PSEUDO","SERIALIZE_SEPARATOR","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodes","Array","filter","s4","random","substring","match","optionalList","indexOf","elms","NodeList","child","cloneNode","_parent","sibling","appendChild","calculatedIndex","foundWrapper","maybeIndexOfOriginal","optionalSelector","foundElements","push","selector","HTMLElement","filterSiblings","thisEl","isMarkNode","nodeName","name","outerMostElement","reverse","toLowerCase","siblings","nodeListFilter","nodeIndex","replace"],"mappings":"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","file":"marklib.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Marklib\"] = factory();\n\telse\n\t\troot[\"Marklib\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Marklib\"] = factory();\n\telse\n\t\troot[\"Marklib\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _interopRequireDefault = __webpack_require__(2)['default'];\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _Rendering = __webpack_require__(3);\n\t\n\tvar _Rendering2 = _interopRequireDefault(_Rendering);\n\t\n\tvar _utilUtil = __webpack_require__(10);\n\t\n\tvar _utilUtil2 = _interopRequireDefault(_utilUtil);\n\t\n\texports['default'] = {\n\t    Rendering: _Rendering2['default'],\n\t    Util: _utilUtil2['default']\n\t};\n\tmodule.exports = exports['default'];\n\t//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ib3dsaW5neC9Qcm9qZWt0ZS9tYXJrbGliL25vZGVfbW9kdWxlcy9lc2xpbnQtbG9hZGVyL2luZGV4LmpzIS9Vc2Vycy9ib3dsaW5neC9Qcm9qZWt0ZS9tYXJrbGliL3NyYy9tYWluL21vZHVsZXMvTWFya2xpYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7O3lCQUVTLFdBQVc7Ozs7d0JBQ2hCLFdBQVc7Ozs7cUJBRWI7QUFDWCxhQUFTLHdCQUFXO0FBQ3BCLFFBQUksdUJBQU07Q0FDYiIsImZpbGUiOiIvVXNlcnMvYm93bGluZ3gvUHJvamVrdGUvbWFya2xpYi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcyEvVXNlcnMvYm93bGluZ3gvUHJvamVrdGUvbWFya2xpYi9zcmMvbWFpbi9tb2R1bGVzL01hcmtsaWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSZW5kZXJpbmcgZnJvbSAnUmVuZGVyaW5nJztcbmltcG9ydCBVdGlsIGZyb20gJ3V0aWwvVXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBSZW5kZXJpbmc6IFJlbmRlcmluZyxcbiAgICBVdGlsOiBVdGlsXG59O1xuIl19\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\texports[\"default\"] = function (obj) {\n\t  return obj && obj.__esModule ? obj : {\n\t    \"default\": obj\n\t  };\n\t};\n\t\n\texports.__esModule = true;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* global Node, Document */\n\t\n\t'use strict';\n\t\n\tvar _createClass = __webpack_require__(4)['default'];\n\t\n\tvar _classCallCheck = __webpack_require__(9)['default'];\n\t\n\tvar _interopRequireDefault = __webpack_require__(2)['default'];\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _utilUtil = __webpack_require__(10);\n\t\n\tvar _utilUtil2 = _interopRequireDefault(_utilUtil);\n\t\n\t/**\n\t * @type {string}\n\t */\n\tvar TAG_NAME = 'x-marker';\n\t/**\n\t * @type {string}\n\t */\n\tvar ATTR_DATA_ORIGINAL_OFFSET_START = 'data-original-offset-start';\n\t/**\n\t * @type {string}\n\t */\n\tvar DATA_ORIGINAL_TEXT_NODE_INDEX = 'original-text-node-index';\n\t/**\n\t * @type {string}\n\t */\n\tvar ATTR_DATA_START_END = 'data-is-start-end';\n\t/**\n\t * @type {string}\n\t */\n\tvar ATTR_DATA_IS_HIGHLIGHT_NODE = 'data-is-highlight-node';\n\t/**\n\t * @type {string}\n\t */\n\tvar ATTR_DATA_ID = 'data-selection-id';\n\t\n\t/**\n\t * @see https://developer.mozilla.org/de/docs/Web/API/Node/compareDocumentPosition\n\t * @type {number}\n\t */\n\tvar DOCUMENT_POSITION_CONTAINED_BY = 16;\n\t\n\tvar Rendering = (function () {\n\t    function Rendering(document, cssClass, context) {\n\t        _classCallCheck(this, Rendering);\n\t\n\t        if (!(document instanceof Document)) {\n\t            throw 'Marklib {0} is required to be a document instance';\n\t        }\n\t        /**\n\t         * @type {Document}\n\t         */\n\t        this.document = document;\n\t\n\t        /**\n\t         * ID of rendering, will be set on each element that is part of it\n\t         * @type {String}\n\t         */\n\t        this.id = _utilUtil2['default'].guid();\n\t\n\t        /**\n\t         * Class that is set on all highlight nodes\n\t         * @type {String}\n\t         */\n\t        this.cssClass = undefined === cssClass ? 'marking' : cssClass;\n\t\n\t        /**\n\t         * StartContainer\n\t         * @type {Node}\n\t         */\n\t        this.startContainer = null;\n\t\n\t        /**\n\t         * EndContainer\n\t         * @type {Node}\n\t         */\n\t        this.endContainer = null;\n\t\n\t        /**\n\t         * Prefix before ID\n\t         * @type {string}\n\t         */\n\t        this.markerPrefix = 'marker-start-';\n\t\n\t        /**\n\t         * Suffix before ID\n\t         * @type {string}\n\t         */\n\t        this.markerSuffix = 'marker-end-';\n\t\n\t        /**\n\t         * @type {Node}\n\t         */\n\t        this.context = context || this.document;\n\t\n\t        /**\n\t         * @type {Function}\n\t         * @private\n\t         */\n\t        this._onWrappedNodeFunc = null;\n\t    }\n\t\n\t    _createClass(Rendering, [{\n\t        key: 'getId',\n\t\n\t        /**\n\t         * @returns {string} id of this rendering\n\t         */\n\t        value: function getId() {\n\t            return this.id;\n\t        }\n\t    }, {\n\t        key: 'setId',\n\t\n\t        /**\n\t         * @param {string} id\n\t         * @returns {Rendering}\n\t         */\n\t        value: function setId(id) {\n\t            this.id = id;\n\t            return this;\n\t        }\n\t    }, {\n\t        key: 'onWrappedNode',\n\t\n\t        /**\n\t         * Listener that is called when a node is wrapped on this instance\n\t         * @param {Function} f\n\t         * @returns {Rendering}\n\t         */\n\t        value: function onWrappedNode(f) {\n\t            this._onWrappedNodeFunc = f;\n\t            return this;\n\t        }\n\t    }, {\n\t        key: '_callOnWrappedNode',\n\t\n\t        /**\n\t         * @private\n\t         */\n\t        value: function _callOnWrappedNode() {\n\t            if (typeof this._onWrappedNodeFunc === 'function') {\n\t                this._onWrappedNodeFunc.apply(this, arguments);\n\t            }\n\t        }\n\t    }, {\n\t        key: '_createWrapTemplate',\n\t\n\t        /**\n\t         * Creates a Template used as a wrapper\n\t         * @returns {Node}\n\t         * @private\n\t         */\n\t        value: function _createWrapTemplate() {\n\t            var el = this.document.createElement(TAG_NAME),\n\t                vTrue = 'true';\n\t            el.className = this.cssClass;\n\t            el.setAttribute(_utilUtil.DATA_IS_SELECTION, vTrue);\n\t            el.setAttribute(ATTR_DATA_ID, this.getId());\n\t            el.setAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE, vTrue);\n\t\n\t            return el;\n\t        }\n\t    }, {\n\t        key: '_createStartEndWrapTemplate',\n\t\n\t        /**\n\t         * Creates a Template to use as start and end marks\n\t         * @param {String} text\n\t         * @returns {Node}\n\t         * @private\n\t         */\n\t        value: function _createStartEndWrapTemplate(text) {\n\t            var el = this._createWrapTemplate(),\n\t                vTrue = 'true';\n\t            el.setAttribute(ATTR_DATA_START_END, vTrue);\n\t            el.textContent = text;\n\t            return el;\n\t        }\n\t    }, {\n\t        key: '_createStartOrEndContainer',\n\t\n\t        /**\n\t         * Creates Start or End Container Element\n\t         * @param initialNode\n\t         * @param prefix\n\t         * @param text\n\t         * @param offset\n\t         * @param index\n\t         * @returns {Node}\n\t         */\n\t        value: function _createStartOrEndContainer(initialNode, prefix, text, offset, index) {\n\t            var wrapper = this._createStartEndWrapTemplate(text);\n\t            wrapper.setAttribute(_utilUtil.ATTR_DATA_ORIGINAL_INDEX, Rendering._getIndexParentIfHas(initialNode, index));\n\t            wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offset);\n\t            wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, index);\n\t            wrapper.marklibInstance = this;\n\t            return wrapper;\n\t        }\n\t    }, {\n\t        key: '_createWrap',\n\t\n\t        /**\n\t         * Wraps given element\n\t         * @param {Node} el\n\t         * @param [optionalLength]\n\t         * @param [optionalIndex]\n\t         * @param [optionalIsSameNode]\n\t         * @returns {Node}\n\t         * @private\n\t         */\n\t        value: function _createWrap(el, optionalLength, optionalIndex, optionalIsSameNode) {\n\t            var originalIndex = optionalIndex >= 0 ? optionalIndex : _utilUtil2['default'].calcIndex(el);\n\t            var wrapper = this._createWrapTemplate();\n\t            wrapper.setAttribute(_utilUtil.ATTR_DATA_ORIGINAL_INDEX, Rendering._getIndexParentIfHas(el, originalIndex));\n\t            var offsetLength = optionalLength >= 0 ? optionalLength : Rendering._getOffsetParentIfHas(el);\n\t            wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offsetLength);\n\t\n\t            // Save a reference to original text node in wrapper\n\t            wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, originalIndex);\n\t\n\t            // save this marker instance to given node\n\t            wrapper.marklibInstance = this;\n\t\n\t            if (optionalIsSameNode) {\n\t                wrapper.setAttribute(ATTR_DATA_START_END, ATTR_DATA_START_END);\n\t            }\n\t            var wrap = _utilUtil2['default'].wrap(el, wrapper);\n\t            this._callOnWrappedNode(el, wrap);\n\t            return wrap;\n\t        }\n\t    }, {\n\t        key: '_createSplitContainer',\n\t\n\t        /**\n\t         * Create split container element\n\t         * @param originalElement {Node} original text node element that is created a wrapper for\n\t         * @param index\n\t         * @param offset\n\t         * @returns {*|jQuery|Node}\n\t         */\n\t        value: function _createSplitContainer(originalElement, index, offset) {\n\t            var wrapper = this.document.createElement(TAG_NAME),\n\t                vTrue = 'true';\n\t            wrapper.setAttribute(_utilUtil.DATA_IS_SELECTION, vTrue);\n\t            wrapper.setAttribute(_utilUtil.ATTR_DATA_ORIGINAL_INDEX, Rendering._getIndexParentIfHas(originalElement, index));\n\t            wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offset);\n\t            wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, index);\n\t            return wrapper;\n\t        }\n\t    }, {\n\t        key: '_walkTextNodes',\n\t\n\t        /**\n\t         * Extracts all TextNodes inside a container\n\t         * @param {Node} el\n\t         * @returns {Array.<Text>}\n\t         */\n\t        value: function _walkTextNodes(el, func) {\n\t            this.walkDom(el, function (node) {\n\t                if (Node.TEXT_NODE === node.nodeType && !_utilUtil2['default'].nodeIsEmpty(node)) {\n\t                    func(node);\n\t                }\n\t                return true;\n\t            });\n\t        }\n\t    }, {\n\t        key: 'walk',\n\t\n\t        /**\n\t         * Walks the tree\n\t         * @param start\n\t         * @param endContainer\n\t         * @param nextParent\n\t         */\n\t        value: function walk(start, endContainer, nextParent) {\n\t            var nextParentNode = start;\n\t            while (nextParentNode && nextParentNode !== nextParent.parentNode) {\n\t                var currentParentNode = nextParentNode;\n\t                nextParentNode = nextParentNode.parentNode;\n\t                if (this.wrapSiblings(currentParentNode.nextSibling, endContainer)) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t    }, {\n\t        key: 'wrapSiblings',\n\t\n\t        /**\n\t         * Will Wrap all textNode siblings of a container (start) inside a defined Element (like a span)\n\t         * If an Element node is found, it will wrap all children of this node inside a element as well.\n\t         * It will stop if endContainer is found as a node\n\t         *\n\t         * @param {Node} start\n\t         * @param {Node} endContainer\n\t         * @returns {boolean} (true if endContainer was found)\n\t         */\n\t        value: function wrapSiblings(start, endContainer) {\n\t            var _this = this;\n\t\n\t            var next = start,\n\t                found = false;\n\t\n\t            // Capsule some logic\n\t            var wrap = (function (n) {\n\t                if (n.parentNode.hasAttribute(ATTR_DATA_START_END) && n.parentNode.hasAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE) && n.parentNode.getAttribute(ATTR_DATA_ID) === _this.getId()) {\n\t                    var thisNode = _this._createWrap(n).parentNode;\n\t                    thisNode.classList.remove(_this.cssClass);\n\t                    thisNode.removeAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE);\n\t                } else {\n\t                    _this._createWrap(n);\n\t                }\n\t            }).bind(this);\n\t\n\t            // helper functions\n\t\n\t            var wrapIf = function wrapIf(n) {\n\t                if (!_utilUtil2['default'].nodeIsEmpty(n)) {\n\t                    wrap(n);\n\t                }\n\t            };\n\t\n\t            var walkIfContained = function walkIfContained(e) {\n\t                if (e === endContainer) {\n\t                    return false;\n\t                }\n\t                if (Node.TEXT_NODE === e.nodeType) {\n\t                    wrapIf(e);\n\t                }\n\t                return true;\n\t            };\n\t\n\t            var walkIfNotContained = function walkIfNotContained(el) {\n\t                wrapIf(el);\n\t            };\n\t\n\t            while (next !== null && next !== endContainer) {\n\t                var currentNext = next;\n\t                next = next.nextSibling;\n\t                // Found a text node, directly wrap inside a span\n\t                if (Node.TEXT_NODE === currentNext.nodeType) {\n\t                    wrapIf(currentNext);\n\t                } else {\n\t                    if (currentNext.compareDocumentPosition(endContainer) & DOCUMENT_POSITION_CONTAINED_BY) {\n\t                        this.walkDom(currentNext, walkIfContained);\n\t                        found = true;\n\t                    } else {\n\t                        this._walkTextNodes(currentNext, walkIfNotContained);\n\t                    }\n\t                    if (found) {\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t            return found;\n\t        }\n\t    }, {\n\t        key: 'walkDom',\n\t\n\t        /**\n\t         * Recursively walks the dom tree unless func returns false\n\t         * This is a lot more efficient then using any jQuery operations\n\t         *\n\t         * Applies node to function\n\t         * @param node\n\t         * @param func\n\t         * @returns {*}\n\t         */\n\t        value: function walkDom(node, func) {\n\t            if (!node) {\n\t                return false;\n\t            }\n\t            var children = node.childNodes;\n\t            if (!children) {\n\t                return false;\n\t            }\n\t            for (var i = 0; i < children.length; i++) {\n\t                if (!this.walkDom(children[i], func)) {\n\t                    return false;\n\t                }\n\t            }\n\t            return func(node);\n\t        }\n\t    }, {\n\t        key: '_markTextSameNode',\n\t\n\t        /**\n\t         * Marks text of the same node\n\t         * @param {Node} textNode\n\t         * @param {int} startIndex\n\t         * @param {int} endIndex\n\t         * @private\n\t         */\n\t        value: function _markTextSameNode(textNode, startIndex, endIndex) {\n\t\n\t            var initialText = textNode.nodeValue,\n\t                initialIndex = _utilUtil2['default'].calcIndex(textNode);\n\t\n\t            if (!initialText) {\n\t                return false;\n\t            }\n\t\n\t            //If there is an unmarked part in the beginning of the text node,\n\t            //cut off that part and put it into it's own textnode.\n\t            if (startIndex > 0) {\n\t                var textBefore = initialText.slice(0, startIndex);\n\t                textNode.parentNode.insertBefore(this.document.createTextNode(textBefore), textNode);\n\t                // wrap cutted text node:\n\t                _utilUtil2['default'].wrap(textNode.previousSibling, this._createSplitContainer(textNode, initialIndex, Rendering._getOffsetParentIfHas(textNode)));\n\t            }\n\t            //If there is an unmarked part at the end of the text node,\n\t            //cut off that part and put it into it's own textnode.\n\t            if (endIndex < initialText.length) {\n\t                var textAfter = initialText.slice(endIndex, initialText.length);\n\t                textNode.parentNode.insertBefore(this.document.createTextNode(textAfter), textNode.nextSibling);\n\t                _utilUtil2['default'].wrap(textNode.nextSibling, this._createSplitContainer(textNode, initialIndex, Rendering._getOffsetParentIfHas(textNode) + endIndex));\n\t            }\n\t\n\t            //Cutoff the unmarked parts and wrap the textnode into a span.\n\t            textNode.nodeValue = initialText.slice(startIndex, endIndex);\n\t            this.startContainer = this._createWrap(textNode, Rendering._getOffsetParentIfHas(textNode) + startIndex, initialIndex, true).parentNode;\n\t            this.endContainer = this.startContainer;\n\t            return this.startContainer;\n\t        }\n\t    }, {\n\t        key: '_markTextDifferentNode',\n\t\n\t        /**\n\t         * Marks text of end and start containers if start and end nodes are different\n\t         * Important: There might be no end container!\n\t         *\n\t         * @param {Node} startContainer\n\t         * @param {Node} endContainer\n\t         * @param {int} startOffset\n\t         * @param {int} endOffset\n\t         * @returns {{startT: (Node), endT: (Node)}}\n\t         * @private\n\t         */\n\t        value: function _markTextDifferentNode(startContainer, endContainer, startOffset, endOffset) {\n\t            // Get current for both start and end:\n\t            var startContainerIndex = _utilUtil2['default'].calcIndex(startContainer);\n\t            var endContainerIndex = _utilUtil2['default'].calcIndex(endContainer);\n\t\n\t            // Split text\n\t            var fullTextStartValue = startContainer.nodeValue;\n\t            // init with startContainer because we may have not a text node here\n\t            var startT = startContainer;\n\t\n\t            if (undefined !== fullTextStartValue) {\n\t                var partTextStartValue = fullTextStartValue.slice(startOffset, fullTextStartValue.length);\n\t                // Set new text to start node\n\t                startContainer.nodeValue = fullTextStartValue.slice(0, startOffset);\n\t\n\t                var offsetStart = Rendering._getOffsetParentIfHas(startContainer);\n\t                // Create a new node for splitted text, offset is the length of new startContainer.nodeValue:\n\t                startT = this._createStartOrEndContainer(startContainer, this.markerPrefix, partTextStartValue, offsetStart === startOffset ? offsetStart : offsetStart + startOffset, startContainerIndex);\n\t                // Append this node after startContainer\n\t                startContainer.parentNode.insertBefore(startT, startContainer.nextSibling);\n\t                this.startContainer = startT;\n\t\n\t                if (startContainer.nodeValue) {\n\t                    // Wrap start container in detection node, offset is always 0 or parent offset.\n\t                    _utilUtil2['default'].wrap(startContainer, this._createSplitContainer(startContainer, startContainerIndex, Rendering._getOffsetParentIfHas(startContainer)));\n\t                }\n\t            }\n\t\n\t            // init with endContainer because we may have not a text node here\n\t            var endT = endContainer;\n\t\n\t            // 2. Extract end Text node,\n\t            var fullTextEndValue = endContainer.nodeValue;\n\t            // It's possible that end container value is null (if a whole paragraph is marked)\n\t            if (undefined !== fullTextEndValue) {\n\t                // Split text\n\t                var partTextEndValue = fullTextEndValue.slice(0, endOffset);\n\t                endContainer.nodeValue = fullTextEndValue.slice(endOffset, fullTextEndValue.length);\n\t                // End Container start offset is always 0 or parent offset.\n\t                endT = this._createStartOrEndContainer(endContainer, this.markerSuffix, partTextEndValue, Rendering._getOffsetParentIfHas(endContainer), endContainerIndex);\n\t\n\t                endContainer.parentNode.insertBefore(endT, endContainer);\n\t                this.endContainer = endT;\n\t                var offsetParent = Rendering._getOffsetParentIfHas(endContainer);\n\t                _utilUtil2['default'].wrap(endContainer, this._createSplitContainer(endContainer, endContainerIndex, offsetParent === endOffset ? offsetParent : offsetParent + endOffset));\n\t            }\n\t\n\t            return { startT: startT, endT: endT };\n\t        }\n\t    }, {\n\t        key: '_findOriginalOffset',\n\t\n\t        /**\n\t         * Will return the original first offset\n\t         * @param element\n\t         * @returns {int}\n\t         * @private\n\t         */\n\t        value: function _findOriginalOffset(element) {\n\t            if (!element.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) {\n\t                return 0;\n\t            }\n\t            var lengthElement = _utilUtil2['default'].parent(element, '[' + ATTR_DATA_ORIGINAL_OFFSET_START + ']');\n\t            return lengthElement ? parseInt(lengthElement.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) : 0;\n\t        }\n\t    }, {\n\t        key: '_renderWithElements',\n\t\n\t        /**\n\t         * Renders a selection\n\t         * @param {Node} startContainer\n\t         * @param {Node} endContainer\n\t         * @param {Node} commonAncestor\n\t         * @param {int} startOffset\n\t         * @param {int} endOffset\n\t         * @param {boolean} [withoutResult] if true result will not be calculated\n\t         * @returns {{startOffset: (int), endOffset: (int)}} the original offsets found\n\t         * @private\n\t         */\n\t        value: function _renderWithElements(startContainer, endContainer, commonAncestor, startOffset, endOffset, withoutResult) {\n\t            var outer = _utilUtil2['default'].parents(startContainer, commonAncestor);\n\t            outer = outer[outer.length - 1];\n\t            var contextContainer = outer ? outer : commonAncestor;\n\t\n\t            // Same Element, means the selection is fully contained in a discrete area, start and endpoint have the same parent\n\t            // but are different nodes:\n\t\n\t            // Start and End offset have to be recalculated because dom might be already changed by highlighting in given node\n\t            // 1: First detect real start offset in startContainer:\n\t\n\t            // That works by selecting the highest wrapper and get original-offset-start data element, see \"findOriginalOffset\"\n\t            // So first select that container:\n\t            var originalStartOffset = this._findOriginalOffset(startContainer);\n\t            var originalEndOffset = this._findOriginalOffset(endContainer);\n\t\n\t            // We may run into Browser Bugs:\n\t\n\t            // If both are not text nodes, use next sibling as endContainer\n\t            if (startContainer.nodeType !== Node.TEXT_NODE && endContainer.nodeType !== Node.TEXT_NODE) {\n\t                if (startContainer === endContainer) {\n\t                    endContainer = endContainer.nextElementSibling || endContainer;\n\t                }\n\t            }\n\t            // IF start/end container is not type of text, select first child text node:\n\t            // We run in some bugs with firefox here that selects no text-nodes sometimes, trying to fix this here\n\t            // Sometimes does not work correctly... (specially when DOM was modified)\n\t            if (startContainer.nodeType !== Node.TEXT_NODE) {\n\t                this.walkDom(startContainer, function (el) {\n\t                    if (el.nodeType === Node.TEXT_NODE) {\n\t                        startContainer = el;\n\t                        return false;\n\t                    }\n\t                    return true;\n\t                });\n\t            }\n\t\n\t            if (endContainer.nodeType !== Node.TEXT_NODE) {\n\t                // Get the last text node:\n\t                var endContainerContents = _utilUtil2['default'].closest(startContainer, ':not([' + _utilUtil.DATA_IS_SELECTION + '])').childNodes;\n\t                if (endContainerContents.length) {\n\t                    var r = endContainerContents[endContainerContents.length - 1];\n\t                    if (r.nodeType === Node.TEXT_NODE) {\n\t                        endContainer = r;\n\t                        endOffset = r.length;\n\t                    } else {\n\t                        var f = r.lastChild;\n\t                        while (f !== null) {\n\t                            if (f && f.nodeType === Node.TEXT_NODE) {\n\t                                endContainer = f;\n\t                                endOffset = f.length;\n\t                                if (f.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) {\n\t                                    endOffset = parseInt(f.parentNode.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) + endOffset;\n\t                                }\n\t                            }\n\t                            f = f.lastChild;\n\t                        }\n\t                    }\n\t                }\n\t                // still no textNode?\n\t                if (endContainer.nodeType !== Node.TEXT_NODE) {\n\t                    throw 'Could not found endContainer, highlighting would be unstable';\n\t                }\n\t            }\n\t\n\t            var result = withoutResult || {\n\t                // Real offset is calculated by relative length and absolute length\n\t                startOffset: originalStartOffset + startOffset,\n\t                endOffset: originalEndOffset + endOffset,\n\t                // get the path for this selection\n\t                startContainerPath: _utilUtil2['default'].getPath(startContainer, this.context),\n\t                endContainerPath: _utilUtil2['default'].getPath(endContainer, this.context)\n\t            };\n\t\n\t            this._renderSelection(startContainer, endContainer, startOffset, endOffset, contextContainer, outer);\n\t\n\t            return result;\n\t        }\n\t    }, {\n\t        key: '_renderSelection',\n\t\n\t        /**\n\t         * Renders a given selection\n\t         *\n\t         * @param {Node} startContainer\n\t         * @param {Node} endContainer\n\t         * @param {int} startOffset\n\t         * @param {int} endOffset\n\t         * @param {Node} contextContainer\n\t         * @param {Node} outer\n\t         * @private\n\t         */\n\t        value: function _renderSelection(startContainer, endContainer, startOffset, endOffset, contextContainer, outer) {\n\t\n\t            // if start and end-container are the same, mark text on the same node\n\t            if (startContainer === endContainer) {\n\t                this._markTextSameNode(startContainer, startOffset, endOffset);\n\t            } else {\n\t                var result = this._markTextDifferentNode(startContainer, endContainer, startOffset, endOffset);\n\t                if (!outer) {\n\t                    this.wrapSiblings(result.startT.nextSibling, endContainer);\n\t                } else {\n\t                    this.walk(result.startT, endContainer, contextContainer);\n\t                }\n\t            }\n\t        }\n\t    }, {\n\t        key: '_deserializePath',\n\t\n\t        /**\n\t         * Deserialize a specific path and finds the right textNodes\n\t         * This even works when DOM has been manipulated before by `marklib`\n\t         * @param {string} path the serialized path (including offsets)\n\t         * @return {Node}\n\t         * @private\n\t         */\n\t        value: function _deserializePath(path) {\n\t            var pSplit = path.split(';'),\n\t                p = pSplit[0],\n\t                objectIndex = parseInt(pSplit[1]),\n\t                charOffset = parseInt(pSplit[2]),\n\t                container = !p.trim() ? this.context : this.context.querySelector(p);\n\t            var maybeFoundNode = null;\n\t            this.walkDom(container, function (n) {\n\t                if (n.nodeType === Node.TEXT_NODE) {\n\t                    var atrOffsetStart = n.parentNode.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START);\n\t                    atrOffsetStart = atrOffsetStart === null ? 0 : atrOffsetStart;\n\t                    var atrIndex = n.parentNode.getAttribute(_utilUtil.ATTR_DATA_ORIGINAL_INDEX);\n\t                    atrIndex = atrIndex === null ? _utilUtil2['default'].calcIndex(n) : atrIndex;\n\t                    if (parseInt(atrIndex) === objectIndex && charOffset >= atrOffsetStart && parseInt(atrOffsetStart) + n.length >= charOffset) {\n\t                        var thisOffset = n.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START) ? charOffset - parseInt(n.parentNode.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) : charOffset;\n\t                        maybeFoundNode = { node: n, offset: thisOffset };\n\t                        return false;\n\t                    }\n\t                } else {\n\t                    return true;\n\t                }\n\t                return true;\n\t            });\n\t\n\t            return maybeFoundNode;\n\t        }\n\t    }, {\n\t        key: 'renderWithPath',\n\t\n\t        /**\n\t         * Prepares to render a Selection with path selectors\n\t         * ```\n\t         * A Path looks like this:\n\t         *\n\t         * #selector;#textnode;#offset\n\t         * ``\n\t         * @param {string} startPath\n\t         * @param {string} endPath\n\t         * @returns {string}\n\t         */\n\t        value: function renderWithPath(startPath, endPath) {\n\t            var startContainer = this._deserializePath(startPath);\n\t            var endContainer = this._deserializePath(endPath);\n\t            if (startContainer && endContainer && startContainer.node && endContainer.node) {\n\t                var range = document.createRange();\n\t                range.setStart(startContainer.node, startContainer.offset);\n\t                range.setEnd(endContainer.node, endContainer.offset);\n\t                var text = range.toString();\n\t                this.renderWithRange(range, true);\n\t                return text;\n\t            }\n\t            throw 'Could not find start- and/or end-container in document';\n\t        }\n\t    }, {\n\t        key: 'renderWithResult',\n\t\n\t        /**\n\t         * Renders a result (that returned from `renderWithRange`)\n\t         * @param result\n\t         * @returns {string}\n\t         */\n\t        value: function renderWithResult(result) {\n\t            return this.renderWithPath(result.startContainerPath + ';' + result.startOffset, result.endContainerPath + ';' + result.endOffset);\n\t        }\n\t    }, {\n\t        key: 'renderWithRange',\n\t\n\t        /**\n\t         * Prepares a selection with a range object\n\t         * @param {Range} range\n\t         * @param {boolean} [withoutResult] optional do calculate a result, the selection would not be serializable\n\t         * @returns {Object}\n\t         */\n\t        value: function renderWithRange(range, withoutResult) {\n\t            return this._renderWithElements(range.startContainer, range.endContainer, range.commonAncestorContainer, range.startOffset, range.endOffset, withoutResult);\n\t        }\n\t    }], [{\n\t        key: '_getIndexParentIfHas',\n\t\n\t        /**\n\t         * @param {Node} container\n\t         * @param {Number} thisIndex\n\t         * @returns {int} index of parent or original\n\t         * @private\n\t         */\n\t        value: function _getIndexParentIfHas(container, thisIndex) {\n\t            var p = container.parentNode;\n\t            var index = parseInt(p.getAttribute(_utilUtil.ATTR_DATA_ORIGINAL_INDEX));\n\t            return index > thisIndex ? index : thisIndex;\n\t        }\n\t    }, {\n\t        key: '_getOffsetParentIfHas',\n\t\n\t        /**\n\t         * @param container\n\t         * @returns {int} offset start of parent if has, else 0\n\t         */\n\t        value: function _getOffsetParentIfHas(container) {\n\t            var p = container.parentNode;\n\t            var offset = parseInt(p.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START));\n\t            return offset > 0 ? offset : 0;\n\t        }\n\t    }]);\n\t\n\t    return Rendering;\n\t})();\n\t\n\texports['default'] = Rendering;\n\tmodule.exports = exports['default'];\n\t//# sourceMappingURL=data:application/json;base64,\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _Object$defineProperty = __webpack_require__(5)[\"default\"];\n\t\n\texports[\"default\"] = (function () {\n\t  function defineProperties(target, props) {\n\t    for (var i = 0; i < props.length; i++) {\n\t      var descriptor = props[i];\n\t      descriptor.enumerable = descriptor.enumerable || false;\n\t      descriptor.configurable = true;\n\t      if (\"value\" in descriptor) descriptor.writable = true;\n\t\n\t      _Object$defineProperty(target, descriptor.key, descriptor);\n\t    }\n\t  }\n\t\n\t  return function (Constructor, protoProps, staticProps) {\n\t    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t    if (staticProps) defineProperties(Constructor, staticProps);\n\t    return Constructor;\n\t  };\n\t})();\n\t\n\texports.__esModule = true;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(6), __esModule: true };\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar $ = __webpack_require__(7);\n\tmodule.exports = function defineProperty(it, key, desc){\n\t  return $.setDesc(it, key, desc);\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar global = typeof self != 'undefined' ? self : Function('return this')()\n\t  , core   = {}\n\t  , defineProperty = Object.defineProperty\n\t  , hasOwnProperty = {}.hasOwnProperty\n\t  , ceil  = Math.ceil\n\t  , floor = Math.floor\n\t  , max   = Math.max\n\t  , min   = Math.min;\n\t// The engine works fine with descriptors? Thank's IE8 for his funny defineProperty.\n\tvar DESC = !!function(){\n\t  try {\n\t    return defineProperty({}, 'a', {get: function(){ return 2; }}).a == 2;\n\t  } catch(e){ /* empty */ }\n\t}();\n\tvar hide = createDefiner(1);\n\t// 7.1.4 ToInteger\n\tfunction toInteger(it){\n\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n\t}\n\tfunction desc(bitmap, value){\n\t  return {\n\t    enumerable  : !(bitmap & 1),\n\t    configurable: !(bitmap & 2),\n\t    writable    : !(bitmap & 4),\n\t    value       : value\n\t  };\n\t}\n\tfunction simpleSet(object, key, value){\n\t  object[key] = value;\n\t  return object;\n\t}\n\tfunction createDefiner(bitmap){\n\t  return DESC ? function(object, key, value){\n\t    return $.setDesc(object, key, desc(bitmap, value));\n\t  } : simpleSet;\n\t}\n\t\n\tfunction isObject(it){\n\t  return it !== null && (typeof it == 'object' || typeof it == 'function');\n\t}\n\tfunction isFunction(it){\n\t  return typeof it == 'function';\n\t}\n\tfunction assertDefined(it){\n\t  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n\t  return it;\n\t}\n\t\n\tvar $ = module.exports = __webpack_require__(8)({\n\t  g: global,\n\t  core: core,\n\t  html: global.document && document.documentElement,\n\t  // http://jsperf.com/core-js-isobject\n\t  isObject:   isObject,\n\t  isFunction: isFunction,\n\t  that: function(){\n\t    return this;\n\t  },\n\t  // 7.1.4 ToInteger\n\t  toInteger: toInteger,\n\t  // 7.1.15 ToLength\n\t  toLength: function(it){\n\t    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n\t  },\n\t  toIndex: function(index, length){\n\t    index = toInteger(index);\n\t    return index < 0 ? max(index + length, 0) : min(index, length);\n\t  },\n\t  has: function(it, key){\n\t    return hasOwnProperty.call(it, key);\n\t  },\n\t  create:     Object.create,\n\t  getProto:   Object.getPrototypeOf,\n\t  DESC:       DESC,\n\t  desc:       desc,\n\t  getDesc:    Object.getOwnPropertyDescriptor,\n\t  setDesc:    defineProperty,\n\t  setDescs:   Object.defineProperties,\n\t  getKeys:    Object.keys,\n\t  getNames:   Object.getOwnPropertyNames,\n\t  getSymbols: Object.getOwnPropertySymbols,\n\t  assertDefined: assertDefined,\n\t  // Dummy, fix for not array-like ES3 string in es5 module\n\t  ES5Object: Object,\n\t  toObject: function(it){\n\t    return $.ES5Object(assertDefined(it));\n\t  },\n\t  hide: hide,\n\t  def: createDefiner(0),\n\t  set: global.Symbol ? simpleSet : hide,\n\t  each: [].forEach\n\t});\n\t/* eslint-disable no-undef */\n\tif(typeof __e != 'undefined')__e = core;\n\tif(typeof __g != 'undefined')__g = global;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function($){\n\t  $.FW   = false;\n\t  $.path = $.core;\n\t  return $;\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\texports[\"default\"] = function (instance, Constructor) {\n\t  if (!(instance instanceof Constructor)) {\n\t    throw new TypeError(\"Cannot call a class as a function\");\n\t  }\n\t};\n\t\n\texports.__esModule = true;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* global Node, NodeList, Element */\n\t\n\t'use strict';\n\t\n\tvar _createClass = __webpack_require__(4)['default'];\n\t\n\tvar _classCallCheck = __webpack_require__(9)['default'];\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t/**\n\t * @type {string}\n\t */\n\tvar ATTR_DATA_ORIGINAL_INDEX = 'data-original-index';\n\texports.ATTR_DATA_ORIGINAL_INDEX = ATTR_DATA_ORIGINAL_INDEX;\n\t/**\n\t * @type {string}\n\t */\n\tvar DATA_PSEUDO = 'data-is-pseudo';\n\texports.DATA_PSEUDO = DATA_PSEUDO;\n\t/**\n\t * @type {string}\n\t */\n\tvar DATA_IS_SELECTION = 'data-is-selection';\n\texports.DATA_IS_SELECTION = DATA_IS_SELECTION;\n\t/**\n\t * @type {string}\n\t */\n\tvar SERIALIZE_SEPARATOR = ';';\n\t\n\t// polyfill for matchesSelector, IE 10/11 does not support Element.matches\n\tif (Element && !Element.prototype.matches) {\n\t    var p = Element.prototype;\n\t    p.matches = p.matchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector || p.webkitMatchesSelector;\n\t}\n\t\n\t/**\n\t * Utility class\n\t * Contains DOM/Node manipulation helpers\n\t */\n\t\n\tvar Util = (function () {\n\t    function Util() {\n\t        _classCallCheck(this, Util);\n\t    }\n\t\n\t    _createClass(Util, null, [{\n\t        key: 'nodeListFilter',\n\t\n\t        /**\n\t         * Filter for a NodeList\n\t         * @param {NodeList} nodes\n\t         * @param {Function} func\n\t         * @returns {Array.<HTMLElement>}\n\t         */\n\t        value: function nodeListFilter(nodes, func) {\n\t            return Array.prototype.filter.call(nodes || [], func);\n\t        }\n\t    }, {\n\t        key: 'guid',\n\t\n\t        /**\n\t         * Generates a unique id\n\t         * @return {String}\n\t         */\n\t        value: function guid() {\n\t            function s4() {\n\t                return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n\t            }\n\t\n\t            return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n\t        }\n\t    }, {\n\t        key: 'nodeIsEmpty',\n\t\n\t        /**\n\t         * Checks if a given node is empty\n\t         * @param {HTMLElement} node\n\t         * @returns {*}\n\t         */\n\t        value: function nodeIsEmpty(node) {\n\t            return node.nodeValue.match(/^[\\s]*$/g);\n\t        }\n\t    }, {\n\t        key: 'index',\n\t\n\t        /**\n\t         * @param {HTMLElement} node\n\t         * @param [optionalList]\n\t         * @return {int} the index of this node in context to it's siblings\n\t         */\n\t        value: function index(node, optionalList) {\n\t            var children = optionalList || (node.nodeType === Node.TEXT_NODE ? node.parentNode.childNodes : node.parentNode.children);\n\t            return Array.prototype.indexOf.call(children || [], node);\n\t        }\n\t    }, {\n\t        key: 'wrap',\n\t\n\t        /**\n\t         * Wraps given `elms` in given `wrapper`\n\t         *\n\t         * @param {HTMLElement} wrapper\n\t         * @param {HTMLElement|Array.<HTMLElement>} elms\n\t         * @return {HTMLElement}\n\t         */\n\t        value: function wrap(elms, wrapper) {\n\t            if (!elms) {\n\t                return wrapper;\n\t            }\n\t            // Convert `elms` to an array, if necessary.\n\t            if (!(elms instanceof NodeList || elms instanceof Array)) {\n\t                elms = [elms];\n\t            }\n\t            for (var i = elms.length - 1; i >= 0; i--) {\n\t                var child = i > 0 ? wrapper.cloneNode(true) : wrapper;\n\t                var el = elms[i];\n\t                // Cache the current parent and sibling.\n\t                var _parent = el.parentNode,\n\t                    sibling = el.nextSibling;\n\t\n\t                child.appendChild(el);\n\t                if (sibling) {\n\t                    _parent.insertBefore(child, sibling);\n\t                } else {\n\t                    _parent.appendChild(child);\n\t                }\n\t            }\n\t            return wrapper;\n\t        }\n\t    }, {\n\t        key: 'calcIndex',\n\t\n\t        /**\n\t         * Will calculate an index depending on an already modified dom by marklib\n\t         * @param {HTMLElement} node\n\t         * @returns {int|boolean}\n\t         */\n\t        value: function calcIndex(node) {\n\t            var calculatedIndex = 0,\n\t                foundWrapper = false;\n\t            var nodes = node.parentNode.childNodes,\n\t                length = nodes.length;\n\t            for (var thisIndex = 0; thisIndex < length; thisIndex++) {\n\t                var el = nodes[thisIndex];\n\t                if (el === node) {\n\t                    break;\n\t                }\n\t                // reset index when original index is found\n\t                var maybeIndexOfOriginal = el.getAttribute ? el.getAttribute(ATTR_DATA_ORIGINAL_INDEX) : null;\n\t\n\t                if (maybeIndexOfOriginal) {\n\t                    calculatedIndex = parseInt(maybeIndexOfOriginal);\n\t                    foundWrapper = true;\n\t                }\n\t                calculatedIndex++;\n\t            }\n\t            return foundWrapper ? calculatedIndex : Util.index(node);\n\t        }\n\t    }, {\n\t        key: 'parents',\n\t\n\t        /**\n\t         * @param {HTMLElement} el\n\t         * @param {String} [optionalSelector] will test given element against a selector\n\t         *  if matches, returns this element immediately\n\t         * @return {Array.<HTMLElement>} an array of all found parents of given element (and optional selector)\n\t         */\n\t        value: function parents(el, optionalSelector) {\n\t            var element = el;\n\t            var foundElements = [];\n\t            while (element.parentNode !== null) {\n\t                element = element.parentNode;\n\t                if (optionalSelector && (element === optionalSelector || typeof optionalSelector === 'string' && element.matches && element.matches(optionalSelector))) {\n\t                    foundElements.push(element);\n\t                } else if (!optionalSelector) {\n\t                    foundElements.push(element);\n\t                }\n\t            }\n\t            return foundElements;\n\t        }\n\t    }, {\n\t        key: 'parent',\n\t\n\t        /**\n\t         * Finds a parent node (the closest) with a given selector\n\t         * @param {Node} el\n\t         * @param {String} selector\n\t         * @returns {Node|bool}\n\t         */\n\t        value: function parent(el, selector) {\n\t            var element = el;\n\t            while (element.parentNode !== null) {\n\t                element = element.parentNode;\n\t                if (element.matches && element.matches(selector)) {\n\t                    return element;\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'closest',\n\t\n\t        /**\n\t         * Finds the closest element including itself matching a given selector\n\t         * @param {Node} el\n\t         * @param selector\n\t         * @returns {Node|bool}\n\t         */\n\t        value: function closest(el, selector) {\n\t            var element = el;\n\t            while (element !== null) {\n\t                if (element.matches && element.matches(selector)) {\n\t                    return element;\n\t                }\n\t                element = element.parentNode;\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'isMarkNode',\n\t\n\t        /**\n\t         * @param {HTMLElement} n\n\t         * @return {bool}\n\t         */\n\t        value: function isMarkNode(n) {\n\t            return n instanceof HTMLElement && n.hasAttribute(DATA_IS_SELECTION);\n\t        }\n\t    }, {\n\t        key: 'getPath',\n\t\n\t        /**\n\t         * Determines the correct paths and excludes all `marklib` generated content\n\t         * TODO: To improve performance we could shorten the path if an ID is present in it.\n\t         * @param {HTMLElement} el\n\t         * @param {HTMLElement} [context] if given extraction path is relative to this element\n\t         * @returns {string}\n\t         */\n\t        value: function getPath(el, context) {\n\t            var path = null,\n\t                node = el;\n\t\n\t            var filterSiblings = function filterSiblings(thisEl) {\n\t                return !Util.isMarkNode(thisEl) && thisEl.nodeName === node.nodeName;\n\t            };\n\t\n\t            while (node) {\n\t                var name = null;\n\t                // If node is a text-node, save index\n\t                if (Node.TEXT_NODE === node.nodeType) {\n\t\n\t                    /* Because nodes may wrapped inside a highlighting node, we need to find the original index that was\n\t                     * valid before the dom changes. We store the last known index position inside all wrapper elements\n\t                     * We select the outermost\n\t                     */\n\t\n\t                    // Extract original index of this node:\n\t                    // Outer most data-original-index is original index\n\t                    var outerMostElement = Util.parents(node, '[' + ATTR_DATA_ORIGINAL_INDEX + ']').reverse()[0];\n\t                    // if element is not yet wrapped in span, recalculate index based on parent container:\n\t                    // We have to do this because text node indexes != element indexes...\n\t                    var calculatedIndex = 0;\n\t                    if (!outerMostElement) {\n\t                        calculatedIndex = Util.calcIndex(node);\n\t                    }\n\t                    var index = outerMostElement ? parseInt(outerMostElement.getAttribute(ATTR_DATA_ORIGINAL_INDEX)) : calculatedIndex;\n\t                    name = SERIALIZE_SEPARATOR + index;\n\t                } else {\n\t                    name = node.nodeName;\n\t                }\n\t\n\t                if (!name) {\n\t                    break;\n\t                }\n\t\n\t                name = name.toLowerCase();\n\t\n\t                var parent = node.parentNode;\n\t\n\t                if (Util.isMarkNode(node)) {\n\t                    if (parent !== context) {\n\t                        node = parent;\n\t                        continue;\n\t                    } else {\n\t                        break;\n\t                    }\n\t                }\n\t\n\t                // Select only siblings that are not part of selection and are of the same type\n\t                // (because we use nth-of-type selector later)\n\t                var siblings = Util.nodeListFilter(parent.children, filterSiblings),\n\t                    nodeIndex = Util.index(node, siblings);\n\t\n\t                if (siblings.length > 1 && nodeIndex >= 0) {\n\t                    name += ':nth-of-type(' + (nodeIndex + 1) + ')';\n\t                }\n\t\n\t                path = name + (path ? '>' + path : '');\n\t\n\t                if (parent === context) {\n\t                    break;\n\t                }\n\t\n\t                node = parent;\n\t            }\n\t\n\t            return path.replace('#document>', '').replace('>;', ';');\n\t        }\n\t    }]);\n\t\n\t    return Util;\n\t})();\n\t\n\texports['default'] = Util;\n\t//# sourceMappingURL=data:application/json;base64,\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** marklib.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9a09ec5721cb60586071\n **/","'use strict';\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _Rendering = require('Rendering');\n\nvar _Rendering2 = _interopRequireDefault(_Rendering);\n\nvar _utilUtil = require('util/Util');\n\nvar _utilUtil2 = _interopRequireDefault(_utilUtil);\n\nexports['default'] = {\n    Rendering: _Rendering2['default'],\n    Util: _utilUtil2['default']\n};\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ib3dsaW5neC9Qcm9qZWt0ZS9tYXJrbGliL25vZGVfbW9kdWxlcy9lc2xpbnQtbG9hZGVyL2luZGV4LmpzIS9Vc2Vycy9ib3dsaW5neC9Qcm9qZWt0ZS9tYXJrbGliL3NyYy9tYWluL21vZHVsZXMvTWFya2xpYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7O3lCQUVTLFdBQVc7Ozs7d0JBQ2hCLFdBQVc7Ozs7cUJBRWI7QUFDWCxhQUFTLHdCQUFXO0FBQ3BCLFFBQUksdUJBQU07Q0FDYiIsImZpbGUiOiIvVXNlcnMvYm93bGluZ3gvUHJvamVrdGUvbWFya2xpYi9ub2RlX21vZHVsZXMvZXNsaW50LWxvYWRlci9pbmRleC5qcyEvVXNlcnMvYm93bGluZ3gvUHJvamVrdGUvbWFya2xpYi9zcmMvbWFpbi9tb2R1bGVzL01hcmtsaWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSZW5kZXJpbmcgZnJvbSAnUmVuZGVyaW5nJztcbmltcG9ydCBVdGlsIGZyb20gJ3V0aWwvVXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBSZW5kZXJpbmc6IFJlbmRlcmluZyxcbiAgICBVdGlsOiBVdGlsXG59O1xuIl19\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/main/modules/Marklib.js\n ** module id = 1\n ** module chunks = 0 1\n **/","\"use strict\";\n\nexports[\"default\"] = function (obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n};\n\nexports.__esModule = true;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/helpers/interop-require-default.js\n ** module id = 2\n ** module chunks = 0 1\n **/","/* global Node, Document */\n\n'use strict';\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _utilUtil = require('util/Util');\n\nvar _utilUtil2 = _interopRequireDefault(_utilUtil);\n\n/**\n * @type {string}\n */\nvar TAG_NAME = 'x-marker';\n/**\n * @type {string}\n */\nvar ATTR_DATA_ORIGINAL_OFFSET_START = 'data-original-offset-start';\n/**\n * @type {string}\n */\nvar DATA_ORIGINAL_TEXT_NODE_INDEX = 'original-text-node-index';\n/**\n * @type {string}\n */\nvar ATTR_DATA_START_END = 'data-is-start-end';\n/**\n * @type {string}\n */\nvar ATTR_DATA_IS_HIGHLIGHT_NODE = 'data-is-highlight-node';\n/**\n * @type {string}\n */\nvar ATTR_DATA_ID = 'data-selection-id';\n\n/**\n * @see https://developer.mozilla.org/de/docs/Web/API/Node/compareDocumentPosition\n * @type {number}\n */\nvar DOCUMENT_POSITION_CONTAINED_BY = 16;\n\nvar Rendering = (function () {\n    function Rendering(document, cssClass, context) {\n        _classCallCheck(this, Rendering);\n\n        if (!(document instanceof Document)) {\n            throw 'Marklib {0} is required to be a document instance';\n        }\n        /**\n         * @type {Document}\n         */\n        this.document = document;\n\n        /**\n         * ID of rendering, will be set on each element that is part of it\n         * @type {String}\n         */\n        this.id = _utilUtil2['default'].guid();\n\n        /**\n         * Class that is set on all highlight nodes\n         * @type {String}\n         */\n        this.cssClass = undefined === cssClass ? 'marking' : cssClass;\n\n        /**\n         * StartContainer\n         * @type {Node}\n         */\n        this.startContainer = null;\n\n        /**\n         * EndContainer\n         * @type {Node}\n         */\n        this.endContainer = null;\n\n        /**\n         * Prefix before ID\n         * @type {string}\n         */\n        this.markerPrefix = 'marker-start-';\n\n        /**\n         * Suffix before ID\n         * @type {string}\n         */\n        this.markerSuffix = 'marker-end-';\n\n        /**\n         * @type {Node}\n         */\n        this.context = context || this.document;\n\n        /**\n         * @type {Function}\n         * @private\n         */\n        this._onWrappedNodeFunc = null;\n    }\n\n    _createClass(Rendering, [{\n        key: 'getId',\n\n        /**\n         * @returns {string} id of this rendering\n         */\n        value: function getId() {\n            return this.id;\n        }\n    }, {\n        key: 'setId',\n\n        /**\n         * @param {string} id\n         * @returns {Rendering}\n         */\n        value: function setId(id) {\n            this.id = id;\n            return this;\n        }\n    }, {\n        key: 'onWrappedNode',\n\n        /**\n         * Listener that is called when a node is wrapped on this instance\n         * @param {Function} f\n         * @returns {Rendering}\n         */\n        value: function onWrappedNode(f) {\n            this._onWrappedNodeFunc = f;\n            return this;\n        }\n    }, {\n        key: '_callOnWrappedNode',\n\n        /**\n         * @private\n         */\n        value: function _callOnWrappedNode() {\n            if (typeof this._onWrappedNodeFunc === 'function') {\n                this._onWrappedNodeFunc.apply(this, arguments);\n            }\n        }\n    }, {\n        key: '_createWrapTemplate',\n\n        /**\n         * Creates a Template used as a wrapper\n         * @returns {Node}\n         * @private\n         */\n        value: function _createWrapTemplate() {\n            var el = this.document.createElement(TAG_NAME),\n                vTrue = 'true';\n            el.className = this.cssClass;\n            el.setAttribute(_utilUtil.DATA_IS_SELECTION, vTrue);\n            el.setAttribute(ATTR_DATA_ID, this.getId());\n            el.setAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE, vTrue);\n\n            return el;\n        }\n    }, {\n        key: '_createStartEndWrapTemplate',\n\n        /**\n         * Creates a Template to use as start and end marks\n         * @param {String} text\n         * @returns {Node}\n         * @private\n         */\n        value: function _createStartEndWrapTemplate(text) {\n            var el = this._createWrapTemplate(),\n                vTrue = 'true';\n            el.setAttribute(ATTR_DATA_START_END, vTrue);\n            el.textContent = text;\n            return el;\n        }\n    }, {\n        key: '_createStartOrEndContainer',\n\n        /**\n         * Creates Start or End Container Element\n         * @param initialNode\n         * @param prefix\n         * @param text\n         * @param offset\n         * @param index\n         * @returns {Node}\n         */\n        value: function _createStartOrEndContainer(initialNode, prefix, text, offset, index) {\n            var wrapper = this._createStartEndWrapTemplate(text);\n            wrapper.setAttribute(_utilUtil.ATTR_DATA_ORIGINAL_INDEX, Rendering._getIndexParentIfHas(initialNode, index));\n            wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offset);\n            wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, index);\n            wrapper.marklibInstance = this;\n            return wrapper;\n        }\n    }, {\n        key: '_createWrap',\n\n        /**\n         * Wraps given element\n         * @param {Node} el\n         * @param [optionalLength]\n         * @param [optionalIndex]\n         * @param [optionalIsSameNode]\n         * @returns {Node}\n         * @private\n         */\n        value: function _createWrap(el, optionalLength, optionalIndex, optionalIsSameNode) {\n            var originalIndex = optionalIndex >= 0 ? optionalIndex : _utilUtil2['default'].calcIndex(el);\n            var wrapper = this._createWrapTemplate();\n            wrapper.setAttribute(_utilUtil.ATTR_DATA_ORIGINAL_INDEX, Rendering._getIndexParentIfHas(el, originalIndex));\n            var offsetLength = optionalLength >= 0 ? optionalLength : Rendering._getOffsetParentIfHas(el);\n            wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offsetLength);\n\n            // Save a reference to original text node in wrapper\n            wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, originalIndex);\n\n            // save this marker instance to given node\n            wrapper.marklibInstance = this;\n\n            if (optionalIsSameNode) {\n                wrapper.setAttribute(ATTR_DATA_START_END, ATTR_DATA_START_END);\n            }\n            var wrap = _utilUtil2['default'].wrap(el, wrapper);\n            this._callOnWrappedNode(el, wrap);\n            return wrap;\n        }\n    }, {\n        key: '_createSplitContainer',\n\n        /**\n         * Create split container element\n         * @param originalElement {Node} original text node element that is created a wrapper for\n         * @param index\n         * @param offset\n         * @returns {*|jQuery|Node}\n         */\n        value: function _createSplitContainer(originalElement, index, offset) {\n            var wrapper = this.document.createElement(TAG_NAME),\n                vTrue = 'true';\n            wrapper.setAttribute(_utilUtil.DATA_IS_SELECTION, vTrue);\n            wrapper.setAttribute(_utilUtil.ATTR_DATA_ORIGINAL_INDEX, Rendering._getIndexParentIfHas(originalElement, index));\n            wrapper.setAttribute(ATTR_DATA_ORIGINAL_OFFSET_START, offset);\n            wrapper.setAttribute(DATA_ORIGINAL_TEXT_NODE_INDEX, index);\n            return wrapper;\n        }\n    }, {\n        key: '_walkTextNodes',\n\n        /**\n         * Extracts all TextNodes inside a container\n         * @param {Node} el\n         * @returns {Array.<Text>}\n         */\n        value: function _walkTextNodes(el, func) {\n            this.walkDom(el, function (node) {\n                if (Node.TEXT_NODE === node.nodeType && !_utilUtil2['default'].nodeIsEmpty(node)) {\n                    func(node);\n                }\n                return true;\n            });\n        }\n    }, {\n        key: 'walk',\n\n        /**\n         * Walks the tree\n         * @param start\n         * @param endContainer\n         * @param nextParent\n         */\n        value: function walk(start, endContainer, nextParent) {\n            var nextParentNode = start;\n            while (nextParentNode && nextParentNode !== nextParent.parentNode) {\n                var currentParentNode = nextParentNode;\n                nextParentNode = nextParentNode.parentNode;\n                if (this.wrapSiblings(currentParentNode.nextSibling, endContainer)) {\n                    break;\n                }\n            }\n        }\n    }, {\n        key: 'wrapSiblings',\n\n        /**\n         * Will Wrap all textNode siblings of a container (start) inside a defined Element (like a span)\n         * If an Element node is found, it will wrap all children of this node inside a element as well.\n         * It will stop if endContainer is found as a node\n         *\n         * @param {Node} start\n         * @param {Node} endContainer\n         * @returns {boolean} (true if endContainer was found)\n         */\n        value: function wrapSiblings(start, endContainer) {\n            var _this = this;\n\n            var next = start,\n                found = false;\n\n            // Capsule some logic\n            var wrap = (function (n) {\n                if (n.parentNode.hasAttribute(ATTR_DATA_START_END) && n.parentNode.hasAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE) && n.parentNode.getAttribute(ATTR_DATA_ID) === _this.getId()) {\n                    var thisNode = _this._createWrap(n).parentNode;\n                    thisNode.classList.remove(_this.cssClass);\n                    thisNode.removeAttribute(ATTR_DATA_IS_HIGHLIGHT_NODE);\n                } else {\n                    _this._createWrap(n);\n                }\n            }).bind(this);\n\n            // helper functions\n\n            var wrapIf = function wrapIf(n) {\n                if (!_utilUtil2['default'].nodeIsEmpty(n)) {\n                    wrap(n);\n                }\n            };\n\n            var walkIfContained = function walkIfContained(e) {\n                if (e === endContainer) {\n                    return false;\n                }\n                if (Node.TEXT_NODE === e.nodeType) {\n                    wrapIf(e);\n                }\n                return true;\n            };\n\n            var walkIfNotContained = function walkIfNotContained(el) {\n                wrapIf(el);\n            };\n\n            while (next !== null && next !== endContainer) {\n                var currentNext = next;\n                next = next.nextSibling;\n                // Found a text node, directly wrap inside a span\n                if (Node.TEXT_NODE === currentNext.nodeType) {\n                    wrapIf(currentNext);\n                } else {\n                    if (currentNext.compareDocumentPosition(endContainer) & DOCUMENT_POSITION_CONTAINED_BY) {\n                        this.walkDom(currentNext, walkIfContained);\n                        found = true;\n                    } else {\n                        this._walkTextNodes(currentNext, walkIfNotContained);\n                    }\n                    if (found) {\n                        return true;\n                    }\n                }\n            }\n            return found;\n        }\n    }, {\n        key: 'walkDom',\n\n        /**\n         * Recursively walks the dom tree unless func returns false\n         * This is a lot more efficient then using any jQuery operations\n         *\n         * Applies node to function\n         * @param node\n         * @param func\n         * @returns {*}\n         */\n        value: function walkDom(node, func) {\n            if (!node) {\n                return false;\n            }\n            var children = node.childNodes;\n            if (!children) {\n                return false;\n            }\n            for (var i = 0; i < children.length; i++) {\n                if (!this.walkDom(children[i], func)) {\n                    return false;\n                }\n            }\n            return func(node);\n        }\n    }, {\n        key: '_markTextSameNode',\n\n        /**\n         * Marks text of the same node\n         * @param {Node} textNode\n         * @param {int} startIndex\n         * @param {int} endIndex\n         * @private\n         */\n        value: function _markTextSameNode(textNode, startIndex, endIndex) {\n\n            var initialText = textNode.nodeValue,\n                initialIndex = _utilUtil2['default'].calcIndex(textNode);\n\n            if (!initialText) {\n                return false;\n            }\n\n            //If there is an unmarked part in the beginning of the text node,\n            //cut off that part and put it into it's own textnode.\n            if (startIndex > 0) {\n                var textBefore = initialText.slice(0, startIndex);\n                textNode.parentNode.insertBefore(this.document.createTextNode(textBefore), textNode);\n                // wrap cutted text node:\n                _utilUtil2['default'].wrap(textNode.previousSibling, this._createSplitContainer(textNode, initialIndex, Rendering._getOffsetParentIfHas(textNode)));\n            }\n            //If there is an unmarked part at the end of the text node,\n            //cut off that part and put it into it's own textnode.\n            if (endIndex < initialText.length) {\n                var textAfter = initialText.slice(endIndex, initialText.length);\n                textNode.parentNode.insertBefore(this.document.createTextNode(textAfter), textNode.nextSibling);\n                _utilUtil2['default'].wrap(textNode.nextSibling, this._createSplitContainer(textNode, initialIndex, Rendering._getOffsetParentIfHas(textNode) + endIndex));\n            }\n\n            //Cutoff the unmarked parts and wrap the textnode into a span.\n            textNode.nodeValue = initialText.slice(startIndex, endIndex);\n            this.startContainer = this._createWrap(textNode, Rendering._getOffsetParentIfHas(textNode) + startIndex, initialIndex, true).parentNode;\n            this.endContainer = this.startContainer;\n            return this.startContainer;\n        }\n    }, {\n        key: '_markTextDifferentNode',\n\n        /**\n         * Marks text of end and start containers if start and end nodes are different\n         * Important: There might be no end container!\n         *\n         * @param {Node} startContainer\n         * @param {Node} endContainer\n         * @param {int} startOffset\n         * @param {int} endOffset\n         * @returns {{startT: (Node), endT: (Node)}}\n         * @private\n         */\n        value: function _markTextDifferentNode(startContainer, endContainer, startOffset, endOffset) {\n            // Get current for both start and end:\n            var startContainerIndex = _utilUtil2['default'].calcIndex(startContainer);\n            var endContainerIndex = _utilUtil2['default'].calcIndex(endContainer);\n\n            // Split text\n            var fullTextStartValue = startContainer.nodeValue;\n            // init with startContainer because we may have not a text node here\n            var startT = startContainer;\n\n            if (undefined !== fullTextStartValue) {\n                var partTextStartValue = fullTextStartValue.slice(startOffset, fullTextStartValue.length);\n                // Set new text to start node\n                startContainer.nodeValue = fullTextStartValue.slice(0, startOffset);\n\n                var offsetStart = Rendering._getOffsetParentIfHas(startContainer);\n                // Create a new node for splitted text, offset is the length of new startContainer.nodeValue:\n                startT = this._createStartOrEndContainer(startContainer, this.markerPrefix, partTextStartValue, offsetStart === startOffset ? offsetStart : offsetStart + startOffset, startContainerIndex);\n                // Append this node after startContainer\n                startContainer.parentNode.insertBefore(startT, startContainer.nextSibling);\n                this.startContainer = startT;\n\n                if (startContainer.nodeValue) {\n                    // Wrap start container in detection node, offset is always 0 or parent offset.\n                    _utilUtil2['default'].wrap(startContainer, this._createSplitContainer(startContainer, startContainerIndex, Rendering._getOffsetParentIfHas(startContainer)));\n                }\n            }\n\n            // init with endContainer because we may have not a text node here\n            var endT = endContainer;\n\n            // 2. Extract end Text node,\n            var fullTextEndValue = endContainer.nodeValue;\n            // It's possible that end container value is null (if a whole paragraph is marked)\n            if (undefined !== fullTextEndValue) {\n                // Split text\n                var partTextEndValue = fullTextEndValue.slice(0, endOffset);\n                endContainer.nodeValue = fullTextEndValue.slice(endOffset, fullTextEndValue.length);\n                // End Container start offset is always 0 or parent offset.\n                endT = this._createStartOrEndContainer(endContainer, this.markerSuffix, partTextEndValue, Rendering._getOffsetParentIfHas(endContainer), endContainerIndex);\n\n                endContainer.parentNode.insertBefore(endT, endContainer);\n                this.endContainer = endT;\n                var offsetParent = Rendering._getOffsetParentIfHas(endContainer);\n                _utilUtil2['default'].wrap(endContainer, this._createSplitContainer(endContainer, endContainerIndex, offsetParent === endOffset ? offsetParent : offsetParent + endOffset));\n            }\n\n            return { startT: startT, endT: endT };\n        }\n    }, {\n        key: '_findOriginalOffset',\n\n        /**\n         * Will return the original first offset\n         * @param element\n         * @returns {int}\n         * @private\n         */\n        value: function _findOriginalOffset(element) {\n            if (!element.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) {\n                return 0;\n            }\n            var lengthElement = _utilUtil2['default'].parent(element, '[' + ATTR_DATA_ORIGINAL_OFFSET_START + ']');\n            return lengthElement ? parseInt(lengthElement.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) : 0;\n        }\n    }, {\n        key: '_renderWithElements',\n\n        /**\n         * Renders a selection\n         * @param {Node} startContainer\n         * @param {Node} endContainer\n         * @param {Node} commonAncestor\n         * @param {int} startOffset\n         * @param {int} endOffset\n         * @param {boolean} [withoutResult] if true result will not be calculated\n         * @returns {{startOffset: (int), endOffset: (int)}} the original offsets found\n         * @private\n         */\n        value: function _renderWithElements(startContainer, endContainer, commonAncestor, startOffset, endOffset, withoutResult) {\n            var outer = _utilUtil2['default'].parents(startContainer, commonAncestor);\n            outer = outer[outer.length - 1];\n            var contextContainer = outer ? outer : commonAncestor;\n\n            // Same Element, means the selection is fully contained in a discrete area, start and endpoint have the same parent\n            // but are different nodes:\n\n            // Start and End offset have to be recalculated because dom might be already changed by highlighting in given node\n            // 1: First detect real start offset in startContainer:\n\n            // That works by selecting the highest wrapper and get original-offset-start data element, see \"findOriginalOffset\"\n            // So first select that container:\n            var originalStartOffset = this._findOriginalOffset(startContainer);\n            var originalEndOffset = this._findOriginalOffset(endContainer);\n\n            // We may run into Browser Bugs:\n\n            // If both are not text nodes, use next sibling as endContainer\n            if (startContainer.nodeType !== Node.TEXT_NODE && endContainer.nodeType !== Node.TEXT_NODE) {\n                if (startContainer === endContainer) {\n                    endContainer = endContainer.nextElementSibling || endContainer;\n                }\n            }\n            // IF start/end container is not type of text, select first child text node:\n            // We run in some bugs with firefox here that selects no text-nodes sometimes, trying to fix this here\n            // Sometimes does not work correctly... (specially when DOM was modified)\n            if (startContainer.nodeType !== Node.TEXT_NODE) {\n                this.walkDom(startContainer, function (el) {\n                    if (el.nodeType === Node.TEXT_NODE) {\n                        startContainer = el;\n                        return false;\n                    }\n                    return true;\n                });\n            }\n\n            if (endContainer.nodeType !== Node.TEXT_NODE) {\n                // Get the last text node:\n                var endContainerContents = _utilUtil2['default'].closest(startContainer, ':not([' + _utilUtil.DATA_IS_SELECTION + '])').childNodes;\n                if (endContainerContents.length) {\n                    var r = endContainerContents[endContainerContents.length - 1];\n                    if (r.nodeType === Node.TEXT_NODE) {\n                        endContainer = r;\n                        endOffset = r.length;\n                    } else {\n                        var f = r.lastChild;\n                        while (f !== null) {\n                            if (f && f.nodeType === Node.TEXT_NODE) {\n                                endContainer = f;\n                                endOffset = f.length;\n                                if (f.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) {\n                                    endOffset = parseInt(f.parentNode.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) + endOffset;\n                                }\n                            }\n                            f = f.lastChild;\n                        }\n                    }\n                }\n                // still no textNode?\n                if (endContainer.nodeType !== Node.TEXT_NODE) {\n                    throw 'Could not found endContainer, highlighting would be unstable';\n                }\n            }\n\n            var result = withoutResult || {\n                // Real offset is calculated by relative length and absolute length\n                startOffset: originalStartOffset + startOffset,\n                endOffset: originalEndOffset + endOffset,\n                // get the path for this selection\n                startContainerPath: _utilUtil2['default'].getPath(startContainer, this.context),\n                endContainerPath: _utilUtil2['default'].getPath(endContainer, this.context)\n            };\n\n            this._renderSelection(startContainer, endContainer, startOffset, endOffset, contextContainer, outer);\n\n            return result;\n        }\n    }, {\n        key: '_renderSelection',\n\n        /**\n         * Renders a given selection\n         *\n         * @param {Node} startContainer\n         * @param {Node} endContainer\n         * @param {int} startOffset\n         * @param {int} endOffset\n         * @param {Node} contextContainer\n         * @param {Node} outer\n         * @private\n         */\n        value: function _renderSelection(startContainer, endContainer, startOffset, endOffset, contextContainer, outer) {\n\n            // if start and end-container are the same, mark text on the same node\n            if (startContainer === endContainer) {\n                this._markTextSameNode(startContainer, startOffset, endOffset);\n            } else {\n                var result = this._markTextDifferentNode(startContainer, endContainer, startOffset, endOffset);\n                if (!outer) {\n                    this.wrapSiblings(result.startT.nextSibling, endContainer);\n                } else {\n                    this.walk(result.startT, endContainer, contextContainer);\n                }\n            }\n        }\n    }, {\n        key: '_deserializePath',\n\n        /**\n         * Deserialize a specific path and finds the right textNodes\n         * This even works when DOM has been manipulated before by `marklib`\n         * @param {string} path the serialized path (including offsets)\n         * @return {Node}\n         * @private\n         */\n        value: function _deserializePath(path) {\n            var pSplit = path.split(';'),\n                p = pSplit[0],\n                objectIndex = parseInt(pSplit[1]),\n                charOffset = parseInt(pSplit[2]),\n                container = !p.trim() ? this.context : this.context.querySelector(p);\n            var maybeFoundNode = null;\n            this.walkDom(container, function (n) {\n                if (n.nodeType === Node.TEXT_NODE) {\n                    var atrOffsetStart = n.parentNode.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START);\n                    atrOffsetStart = atrOffsetStart === null ? 0 : atrOffsetStart;\n                    var atrIndex = n.parentNode.getAttribute(_utilUtil.ATTR_DATA_ORIGINAL_INDEX);\n                    atrIndex = atrIndex === null ? _utilUtil2['default'].calcIndex(n) : atrIndex;\n                    if (parseInt(atrIndex) === objectIndex && charOffset >= atrOffsetStart && parseInt(atrOffsetStart) + n.length >= charOffset) {\n                        var thisOffset = n.parentNode.hasAttribute(ATTR_DATA_ORIGINAL_OFFSET_START) ? charOffset - parseInt(n.parentNode.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START)) : charOffset;\n                        maybeFoundNode = { node: n, offset: thisOffset };\n                        return false;\n                    }\n                } else {\n                    return true;\n                }\n                return true;\n            });\n\n            return maybeFoundNode;\n        }\n    }, {\n        key: 'renderWithPath',\n\n        /**\n         * Prepares to render a Selection with path selectors\n         * ```\n         * A Path looks like this:\n         *\n         * #selector;#textnode;#offset\n         * ``\n         * @param {string} startPath\n         * @param {string} endPath\n         * @returns {string}\n         */\n        value: function renderWithPath(startPath, endPath) {\n            var startContainer = this._deserializePath(startPath);\n            var endContainer = this._deserializePath(endPath);\n            if (startContainer && endContainer && startContainer.node && endContainer.node) {\n                var range = document.createRange();\n                range.setStart(startContainer.node, startContainer.offset);\n                range.setEnd(endContainer.node, endContainer.offset);\n                var text = range.toString();\n                this.renderWithRange(range, true);\n                return text;\n            }\n            throw 'Could not find start- and/or end-container in document';\n        }\n    }, {\n        key: 'renderWithResult',\n\n        /**\n         * Renders a result (that returned from `renderWithRange`)\n         * @param result\n         * @returns {string}\n         */\n        value: function renderWithResult(result) {\n            return this.renderWithPath(result.startContainerPath + ';' + result.startOffset, result.endContainerPath + ';' + result.endOffset);\n        }\n    }, {\n        key: 'renderWithRange',\n\n        /**\n         * Prepares a selection with a range object\n         * @param {Range} range\n         * @param {boolean} [withoutResult] optional do calculate a result, the selection would not be serializable\n         * @returns {Object}\n         */\n        value: function renderWithRange(range, withoutResult) {\n            return this._renderWithElements(range.startContainer, range.endContainer, range.commonAncestorContainer, range.startOffset, range.endOffset, withoutResult);\n        }\n    }], [{\n        key: '_getIndexParentIfHas',\n\n        /**\n         * @param {Node} container\n         * @param {Number} thisIndex\n         * @returns {int} index of parent or original\n         * @private\n         */\n        value: function _getIndexParentIfHas(container, thisIndex) {\n            var p = container.parentNode;\n            var index = parseInt(p.getAttribute(_utilUtil.ATTR_DATA_ORIGINAL_INDEX));\n            return index > thisIndex ? index : thisIndex;\n        }\n    }, {\n        key: '_getOffsetParentIfHas',\n\n        /**\n         * @param container\n         * @returns {int} offset start of parent if has, else 0\n         */\n        value: function _getOffsetParentIfHas(container) {\n            var p = container.parentNode;\n            var offset = parseInt(p.getAttribute(ATTR_DATA_ORIGINAL_OFFSET_START));\n            return offset > 0 ? offset : 0;\n        }\n    }]);\n\n    return Rendering;\n})();\n\nexports['default'] = Rendering;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/main/Rendering.js\n ** module id = 3\n ** module chunks = 0 1\n **/","\"use strict\";\n\nvar _Object$defineProperty = require(\"babel-runtime/core-js/object/define-property\")[\"default\"];\n\nexports[\"default\"] = (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n\n      _Object$defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();\n\nexports.__esModule = true;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/helpers/create-class.js\n ** module id = 4\n ** module chunks = 0 1\n **/","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/core-js/object/define-property.js\n ** module id = 5\n ** module chunks = 0 1\n **/","var $ = require('../../modules/$');\nmodule.exports = function defineProperty(it, key, desc){\n  return $.setDesc(it, key, desc);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/~/core-js/library/fn/object/define-property.js\n ** module id = 6\n ** module chunks = 0 1\n **/","'use strict';\nvar global = typeof self != 'undefined' ? self : Function('return this')()\n  , core   = {}\n  , defineProperty = Object.defineProperty\n  , hasOwnProperty = {}.hasOwnProperty\n  , ceil  = Math.ceil\n  , floor = Math.floor\n  , max   = Math.max\n  , min   = Math.min;\n// The engine works fine with descriptors? Thank's IE8 for his funny defineProperty.\nvar DESC = !!function(){\n  try {\n    return defineProperty({}, 'a', {get: function(){ return 2; }}).a == 2;\n  } catch(e){ /* empty */ }\n}();\nvar hide = createDefiner(1);\n// 7.1.4 ToInteger\nfunction toInteger(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n}\nfunction desc(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n}\nfunction simpleSet(object, key, value){\n  object[key] = value;\n  return object;\n}\nfunction createDefiner(bitmap){\n  return DESC ? function(object, key, value){\n    return $.setDesc(object, key, desc(bitmap, value));\n  } : simpleSet;\n}\n\nfunction isObject(it){\n  return it !== null && (typeof it == 'object' || typeof it == 'function');\n}\nfunction isFunction(it){\n  return typeof it == 'function';\n}\nfunction assertDefined(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n}\n\nvar $ = module.exports = require('./$.fw')({\n  g: global,\n  core: core,\n  html: global.document && document.documentElement,\n  // http://jsperf.com/core-js-isobject\n  isObject:   isObject,\n  isFunction: isFunction,\n  that: function(){\n    return this;\n  },\n  // 7.1.4 ToInteger\n  toInteger: toInteger,\n  // 7.1.15 ToLength\n  toLength: function(it){\n    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n  },\n  toIndex: function(index, length){\n    index = toInteger(index);\n    return index < 0 ? max(index + length, 0) : min(index, length);\n  },\n  has: function(it, key){\n    return hasOwnProperty.call(it, key);\n  },\n  create:     Object.create,\n  getProto:   Object.getPrototypeOf,\n  DESC:       DESC,\n  desc:       desc,\n  getDesc:    Object.getOwnPropertyDescriptor,\n  setDesc:    defineProperty,\n  setDescs:   Object.defineProperties,\n  getKeys:    Object.keys,\n  getNames:   Object.getOwnPropertyNames,\n  getSymbols: Object.getOwnPropertySymbols,\n  assertDefined: assertDefined,\n  // Dummy, fix for not array-like ES3 string in es5 module\n  ES5Object: Object,\n  toObject: function(it){\n    return $.ES5Object(assertDefined(it));\n  },\n  hide: hide,\n  def: createDefiner(0),\n  set: global.Symbol ? simpleSet : hide,\n  each: [].forEach\n});\n/* eslint-disable no-undef */\nif(typeof __e != 'undefined')__e = core;\nif(typeof __g != 'undefined')__g = global;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/~/core-js/library/modules/$.js\n ** module id = 7\n ** module chunks = 0 1\n **/","module.exports = function($){\n  $.FW   = false;\n  $.path = $.core;\n  return $;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/~/core-js/library/modules/$.fw.js\n ** module id = 8\n ** module chunks = 0 1\n **/","\"use strict\";\n\nexports[\"default\"] = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nexports.__esModule = true;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/babel-runtime/helpers/class-call-check.js\n ** module id = 9\n ** module chunks = 0 1\n **/","/* global Node, NodeList, Element */\n\n'use strict';\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n/**\n * @type {string}\n */\nvar ATTR_DATA_ORIGINAL_INDEX = 'data-original-index';\nexports.ATTR_DATA_ORIGINAL_INDEX = ATTR_DATA_ORIGINAL_INDEX;\n/**\n * @type {string}\n */\nvar DATA_PSEUDO = 'data-is-pseudo';\nexports.DATA_PSEUDO = DATA_PSEUDO;\n/**\n * @type {string}\n */\nvar DATA_IS_SELECTION = 'data-is-selection';\nexports.DATA_IS_SELECTION = DATA_IS_SELECTION;\n/**\n * @type {string}\n */\nvar SERIALIZE_SEPARATOR = ';';\n\n// polyfill for matchesSelector, IE 10/11 does not support Element.matches\nif (Element && !Element.prototype.matches) {\n    var p = Element.prototype;\n    p.matches = p.matchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector || p.webkitMatchesSelector;\n}\n\n/**\n * Utility class\n * Contains DOM/Node manipulation helpers\n */\n\nvar Util = (function () {\n    function Util() {\n        _classCallCheck(this, Util);\n    }\n\n    _createClass(Util, null, [{\n        key: 'nodeListFilter',\n\n        /**\n         * Filter for a NodeList\n         * @param {NodeList} nodes\n         * @param {Function} func\n         * @returns {Array.<HTMLElement>}\n         */\n        value: function nodeListFilter(nodes, func) {\n            return Array.prototype.filter.call(nodes || [], func);\n        }\n    }, {\n        key: 'guid',\n\n        /**\n         * Generates a unique id\n         * @return {String}\n         */\n        value: function guid() {\n            function s4() {\n                return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n            }\n\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n        }\n    }, {\n        key: 'nodeIsEmpty',\n\n        /**\n         * Checks if a given node is empty\n         * @param {HTMLElement} node\n         * @returns {*}\n         */\n        value: function nodeIsEmpty(node) {\n            return node.nodeValue.match(/^[\\s]*$/g);\n        }\n    }, {\n        key: 'index',\n\n        /**\n         * @param {HTMLElement} node\n         * @param [optionalList]\n         * @return {int} the index of this node in context to it's siblings\n         */\n        value: function index(node, optionalList) {\n            var children = optionalList || (node.nodeType === Node.TEXT_NODE ? node.parentNode.childNodes : node.parentNode.children);\n            return Array.prototype.indexOf.call(children || [], node);\n        }\n    }, {\n        key: 'wrap',\n\n        /**\n         * Wraps given `elms` in given `wrapper`\n         *\n         * @param {HTMLElement} wrapper\n         * @param {HTMLElement|Array.<HTMLElement>} elms\n         * @return {HTMLElement}\n         */\n        value: function wrap(elms, wrapper) {\n            if (!elms) {\n                return wrapper;\n            }\n            // Convert `elms` to an array, if necessary.\n            if (!(elms instanceof NodeList || elms instanceof Array)) {\n                elms = [elms];\n            }\n            for (var i = elms.length - 1; i >= 0; i--) {\n                var child = i > 0 ? wrapper.cloneNode(true) : wrapper;\n                var el = elms[i];\n                // Cache the current parent and sibling.\n                var _parent = el.parentNode,\n                    sibling = el.nextSibling;\n\n                child.appendChild(el);\n                if (sibling) {\n                    _parent.insertBefore(child, sibling);\n                } else {\n                    _parent.appendChild(child);\n                }\n            }\n            return wrapper;\n        }\n    }, {\n        key: 'calcIndex',\n\n        /**\n         * Will calculate an index depending on an already modified dom by marklib\n         * @param {HTMLElement} node\n         * @returns {int|boolean}\n         */\n        value: function calcIndex(node) {\n            var calculatedIndex = 0,\n                foundWrapper = false;\n            var nodes = node.parentNode.childNodes,\n                length = nodes.length;\n            for (var thisIndex = 0; thisIndex < length; thisIndex++) {\n                var el = nodes[thisIndex];\n                if (el === node) {\n                    break;\n                }\n                // reset index when original index is found\n                var maybeIndexOfOriginal = el.getAttribute ? el.getAttribute(ATTR_DATA_ORIGINAL_INDEX) : null;\n\n                if (maybeIndexOfOriginal) {\n                    calculatedIndex = parseInt(maybeIndexOfOriginal);\n                    foundWrapper = true;\n                }\n                calculatedIndex++;\n            }\n            return foundWrapper ? calculatedIndex : Util.index(node);\n        }\n    }, {\n        key: 'parents',\n\n        /**\n         * @param {HTMLElement} el\n         * @param {String} [optionalSelector] will test given element against a selector\n         *  if matches, returns this element immediately\n         * @return {Array.<HTMLElement>} an array of all found parents of given element (and optional selector)\n         */\n        value: function parents(el, optionalSelector) {\n            var element = el;\n            var foundElements = [];\n            while (element.parentNode !== null) {\n                element = element.parentNode;\n                if (optionalSelector && (element === optionalSelector || typeof optionalSelector === 'string' && element.matches && element.matches(optionalSelector))) {\n                    foundElements.push(element);\n                } else if (!optionalSelector) {\n                    foundElements.push(element);\n                }\n            }\n            return foundElements;\n        }\n    }, {\n        key: 'parent',\n\n        /**\n         * Finds a parent node (the closest) with a given selector\n         * @param {Node} el\n         * @param {String} selector\n         * @returns {Node|bool}\n         */\n        value: function parent(el, selector) {\n            var element = el;\n            while (element.parentNode !== null) {\n                element = element.parentNode;\n                if (element.matches && element.matches(selector)) {\n                    return element;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: 'closest',\n\n        /**\n         * Finds the closest element including itself matching a given selector\n         * @param {Node} el\n         * @param selector\n         * @returns {Node|bool}\n         */\n        value: function closest(el, selector) {\n            var element = el;\n            while (element !== null) {\n                if (element.matches && element.matches(selector)) {\n                    return element;\n                }\n                element = element.parentNode;\n            }\n            return false;\n        }\n    }, {\n        key: 'isMarkNode',\n\n        /**\n         * @param {HTMLElement} n\n         * @return {bool}\n         */\n        value: function isMarkNode(n) {\n            return n instanceof HTMLElement && n.hasAttribute(DATA_IS_SELECTION);\n        }\n    }, {\n        key: 'getPath',\n\n        /**\n         * Determines the correct paths and excludes all `marklib` generated content\n         * TODO: To improve performance we could shorten the path if an ID is present in it.\n         * @param {HTMLElement} el\n         * @param {HTMLElement} [context] if given extraction path is relative to this element\n         * @returns {string}\n         */\n        value: function getPath(el, context) {\n            var path = null,\n                node = el;\n\n            var filterSiblings = function filterSiblings(thisEl) {\n                return !Util.isMarkNode(thisEl) && thisEl.nodeName === node.nodeName;\n            };\n\n            while (node) {\n                var name = null;\n                // If node is a text-node, save index\n                if (Node.TEXT_NODE === node.nodeType) {\n\n                    /* Because nodes may wrapped inside a highlighting node, we need to find the original index that was\n                     * valid before the dom changes. We store the last known index position inside all wrapper elements\n                     * We select the outermost\n                     */\n\n                    // Extract original index of this node:\n                    // Outer most data-original-index is original index\n                    var outerMostElement = Util.parents(node, '[' + ATTR_DATA_ORIGINAL_INDEX + ']').reverse()[0];\n                    // if element is not yet wrapped in span, recalculate index based on parent container:\n                    // We have to do this because text node indexes != element indexes...\n                    var calculatedIndex = 0;\n                    if (!outerMostElement) {\n                        calculatedIndex = Util.calcIndex(node);\n                    }\n                    var index = outerMostElement ? parseInt(outerMostElement.getAttribute(ATTR_DATA_ORIGINAL_INDEX)) : calculatedIndex;\n                    name = SERIALIZE_SEPARATOR + index;\n                } else {\n                    name = node.nodeName;\n                }\n\n                if (!name) {\n                    break;\n                }\n\n                name = name.toLowerCase();\n\n                var parent = node.parentNode;\n\n                if (Util.isMarkNode(node)) {\n                    if (parent !== context) {\n                        node = parent;\n                        continue;\n                    } else {\n                        break;\n                    }\n                }\n\n                // Select only siblings that are not part of selection and are of the same type\n                // (because we use nth-of-type selector later)\n                var siblings = Util.nodeListFilter(parent.children, filterSiblings),\n                    nodeIndex = Util.index(node, siblings);\n\n                if (siblings.length > 1 && nodeIndex >= 0) {\n                    name += ':nth-of-type(' + (nodeIndex + 1) + ')';\n                }\n\n                path = name + (path ? '>' + path : '');\n\n                if (parent === context) {\n                    break;\n                }\n\n                node = parent;\n            }\n\n            return path.replace('#document>', '').replace('>;', ';');\n        }\n    }]);\n\n    return Util;\n})();\n\nexports['default'] = Util;\n//# sourceMappingURL=data:application/json;base64,\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/main/util/Util.js\n ** module id = 10\n ** module chunks = 0 1\n **/"],"sourceRoot":""}