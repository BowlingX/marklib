marklib
===

[![Circle CI](https://circleci.com/gh/BowlingX/marklib.svg?style=svg)](https://circleci.com/gh/BowlingX/marklib)
[![Codacy Badge](https://www.codacy.com/project/badge/d31afc00c2f04ba2848f3991d6b17e47)](https://www.codacy.com/app/billing/marklib)
[![Coverage Status](https://coveralls.io/repos/BowlingX/marklib/badge.svg?branch=master)](https://coveralls.io/r/BowlingX/marklib?branch=master)
[![npm](https://img.shields.io/npm/v/marklib.svg?style=flat-square)](https://www.npmjs.com/package/marklib)
[![Join the chat at https://gitter.im/BowlingX/marklib](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/BowlingX/marklib?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

A simple and fast zero-dependencies-library to transform text-selections into serializable markings.

[Demo](http://bowlingx.github.io/marklib/)

![Demo-Gif](https://raw.githubusercontent.com/BowlingX/marklib/master/marklib.gif)

## Install

marklib can be installed with `npm` or `bower`.

`npm install --save-dev marklib`

`bower install marklib --save`

## Usage

The API is quite limited right now, and supports only rendering either a range or a serialized result.

### Render by selection

``` javascript

// obtain a selection from document
var selection = document.getSelection();

// create a new rendering based on the current document
var renderer = new Marklib.Rendering(document)
renderer.setId('myRenderId') // if an ID is not provided, a autogenerated one will be used

// renders the given selection and returns a serializable result.
var result = renderer.renderWithRange(selection.getRangeAt(0));

```

#### Constructor Arguments

- 1) `HTMLDocument` document -> the document instance used
- 2) `string` [cssClass], optional -> a class that is applied on each marking container (for styling)
- 3) `HTMLElement` [context], optional -> 
    the context used to serialize / deserialize the rendering, if not given the document instance


### Render by serialized result

A Serialized results consist of 2 strings (start end end) in the following form

```

'body>section;0;1'`
-▲------------▲-▲ 

```

- ▲ The first part defines a css-selector (queryable with document.querySelector).
- ▲ The second part defines the text-node inside the given selector
- ▲ The third part defines the string-offset inside this text-node

#### Example

``` javascript

 // This is the result we get from the renderWithRange method
 
 var result = {
    startContainerPath: 'body>section;0',
    endContainerPath: 'body>section;1',
    startOffset: 2,
    endOffset: 5
 }

 var rendering = new Marklib.Rendering(document);
 
 rendering.renderWithResult(result);

```

## Use-Cases

- Annotations
- Collaboration tools
- Inline-Commenting (I actually started a project that will do something like this: https://github.com/BowlingX/commentp)

## License

The MIT License (MIT)

Copyright (c) 2015 David Heidrich

Any contribution is welcome, just issue a pull-request or bug/feature if you found something :)

